#!/usr/bin/perl

# Name:     check_mem
# Author:   Trevor Williams  <phase1geo(gmail.com)>
# Date:     3/17/2008
# Usage:    <covered_command> | check_mem

$num_allocs = 0;
$allocated  = 0;
$num_frees  = 0;
$freed      = 0;
$mem_size   = 0;
$line_num   = 1;

while( defined( $line = <STDIN> ) ) {

  chomp( $line );

  # If the line was a malloc or strdup call, add its memory to our tracker
  if( $line =~ /(MALLOC|STRDUP|CALLOC)\s+\((\S+)\)\s+(\d+)\s+bytes\s+\(file:\s+(\S+),\s+line:\s+(\d+)\)\s*-\s*(\d+)/) {

    $addr  = $2;
    $bytes = $3;
    $file  = $4;
    $lnum  = $5;
    $curr  = $6;

    if( ($mem_size + $bytes) != $curr ) {
      die "Memory was modified by something other than a malloc, realloc, calloc, strdup, free (line: $line)\n";
    }
    $mem_size = $curr;

    if( $addrs->{$addr} != () ) {
      die "Address $addr found to be allocated twice without a free!\n";
    } else {
      $addrs->{$addr}{BYTES} = $bytes;
      $addrs->{$addr}{AFILE} = $file;
      $addrs->{$addr}{ALNUM} = $lnum;
      $num_allocs++;
      $allocated += $bytes;
    }

  # Otherwise, if the line was a realloc, delete the old memory and add the new memory to our tracker
  } elsif( $line =~ /REALLOC\s+\((\S+)\s+->\s+(\S+)\)\s+(\d+)\s+\((\d+)\)\s+bytes\s+\(file:\s+(\S+),\s+line:\s+(\d+)\)\s*-\s*(\d+)/) {

    $old_addr  = $1;
    $addr      = $2;
    $bytes     = $3;
    $old_bytes = $4;
    $file      = $5;
    $lnum      = $6;
    $curr      = $7;

    if( ($mem_size - $old_bytes + $bytes) != $curr ) {
      die "Memory was modified by something other than a malloc, realloc, strdup, free (line: $line)\n";
    }
    $mem_size = $curr;

    # Delete the memory for the old address
    if( ($old_addr ne "(nil)") && ($old_addr ne "0x0") ) {
      if( $addrs->{$old_addr} == () ) {
        die "Address $old_addr being reallocated but never existed!\n";
      } elsif( $addrs->{$old_addr}{BYTES} != $old_bytes ) {
        die "Number of bytes freed ($old_bytes) in $file:$lnum does not match number of bytes allocated (" . $addrs->{$addr}{BYTES} . ") for address $old_addr in " . $addrs->{$addr}{AFILE} . ":" . $addrs->{$addr}{ALNUM} . "\n";
      } else {
        delete $addrs->{$old_addr}; 
        $num_frees++;
        $freed += $old_bytes;
      }
    }

    # Allocate the new memory
    if( ($addr ne "(nil)") && ($addr ne "0x0") ) {
      if( $addrs->{$addr} != () ) {
        die "Address $addr found to be allocated twice without a free!\n";
      } else {
        $addrs->{$addr}{BYTES} = $bytes;
        $addrs->{$addr}{AFILE} = $file;
        $addrs->{$addr}{ALNUM} = $lnum;
        $num_allocs++;
        $allocated += $bytes;
      }
    }

  # Otherwise, if the line was a free, check the bytes freed against the bytes allocated and remove the address from our tracker
  } elsif( $line =~ /FREE\s+\((\S+)\)\s+(\d+)\s+bytes\s+\(file:\s+(\S+),\s+line:\s+(\d+)\)\s*-\s*(\d+)/) {

    $addr  = $1;
    $bytes = $2;
    $file  = $3;
    $lnum  = $4;
    $curr  = $5;

    if( ($mem_size - $bytes) != $curr ) {
      die "Memory was modified by something other than a malloc, realloc, strdup, free (line $line_num)\n";
    }
    $mem_size = $curr;

    if( $addrs->{$addr} == () ) {
      die "Address $addr was being freed when it was never allocated in $file:$lnum!\n";
    } elsif( $addrs->{$addr}{BYTES} != $bytes ) {
      die "Number of bytes freed ($bytes) in $file:$lnum does not match number of bytes allocated (" . $addrs->{$addr}{BYTES} . ") for address $addr in " . $addrs->{$addr}{AFILE} . ":" . $addrs->{$addr}{ALNUM} . "\n";
    } else {
      delete $addrs->{$addr};
      $num_frees++;
      $freed += $bytes;
    }

  # Otherwise, if we have reached the end of the output, make sure Covered is reporting 0 bytes of allocated memory
  } elsif( $line =~ /curr_malloc_size:\s+(-?\d+)/ ) {

    $malloc_size     = $1;
    $saw_malloc_size = 1;

    # Output the number of allocates/deallocates to the user if they do not match
    if( ($num_allocs != $num_frees) || ($allocated != $freed) ) {
      print "Number of allocates: $num_allocs ($allocated bytes), number of frees: $num_frees ($freed bytes)\n";
    }

    foreach $addr (keys %$addrs) {
      print STDERR "Found allocated address $addr from " . $addrs->{$addr}{AFILE} . ":" . $addrs->{$addr}{ALNUM} . "\n";
    }

    # If we actually get to this point, make sure that Covered is showing no memory lossage
    if( keys( %$addrs ) == () ) {
      if( $malloc_size ne "0" ) {
        die "Covered is reporting memory lossage ($malloc_size bytes), but check_mem script finds no memory problems!  Please run valgrind...\n";
      }
    } else {
      die;
    }

  # Otherwise, pass this line to standard output
  } else {

    print "$line\n";

  }

  $line_num++;

}

# If we did not reach the end of simulation for some reason, return that an error occurred.
if( $saw_malloc_size == 0 ) {
  die "curr_malloc_size was not output\n";
}
