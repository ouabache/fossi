%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Fri Feb 17 14:14:41 2012
%%Title: /home/johne/socgen/doc/src/dvcon_2012/poster.sch
%%Author: (null)
%%BoundingBox: 0 0 2383 3370
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000214 1.000214 scale
-45600 -20300 translate
45600 20300 78700 20300 10 line
78700 20300 78700 67100 10 line
78700 67100 45600 67100 10 line
45600 67100 45600 20300 10 line
gsave
false true false true 2340.000000 [(SOCGEN     A design for reuse environment) ] 0 77900 65900 1625.000000 text
grestore
gsave
false true false true 1300.000000 [(Free opensourced toolkit and libraries for creating SoC designs) (Available on opencores.org  [Project:  socgen]) (IP-Xact based toolflow promoting easy exchange of ip between users) (Correct by construction design methodology) (Separate design view for each toolflow) (Easy to retarget designs into different processes) (Builds verilog files from ip-xact descriptions) (Prevents name space collisions from module names and verilog `\(tic\) macros) (Packages each component into single library file) (Eliminates search paths) (Supports IP-Xact  bus definitions) () (Icarus verilog simulation suites       Code Coverage using Covered) (RTL checking using Verilator              Synthesys using Xilinx WebPack) (Fizzim State Machine tool                   Control and status register generator) () ] 0 77700 61500 902.777771 text
grestore
gsave
false false false false 780.000000 [(SOCGEN) ] 0 46000 41300 541.666687 text
grestore
gsave
false false false false 780.000000 [(DOC) ] 0 47900 40000 541.666687 text
grestore
gsave
false false false false 780.000000 [(TOOLS) ] 0 47900 39400 541.666687 text
grestore
gsave
false false false false 780.000000 [(BIN) ] 0 49500 38700 541.666687 text
grestore
gsave
false false false false 780.000000 [(PROJECTS) ] 0 47900 37400 541.666687 text
grestore
gsave
false false false false 780.000000 [(VENDOR1) ] 0 49500 36700 541.666687 text
grestore
gsave
false false false false 780.000000 [(INSTALL) ] 0 49500 38100 541.666687 text
grestore
gsave
false false false false 780.000000 [(LIBRARY1) ] 0 50600 36000 541.666687 text
grestore
gsave
false false false false 780.000000 [(IP) ] 0 52100 35300 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMPONENT) ] 0 52400 34500 541.666687 text
grestore
gsave
false false false false 780.000000 [(PROGRAM) ] 0 52400 33000 541.666687 text
grestore
gsave
false false false false 780.000000 [(SW) ] 0 51900 33700 541.666687 text
grestore
gsave
false false false false 780.000000 [(WORK) ] 0 57200 41200 541.666687 text
grestore
gsave
false false false false 780.000000 [(LIBRARY) ] 0 58700 40300 541.666687 text
grestore
gsave
false false false false 780.000000 [(IP) ] 0 60500 39700 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMPONENT) ] 0 60700 39000 541.666687 text
grestore
gsave
false false false false 780.000000 [(RTL) ] 0 61900 37800 541.666687 text
grestore
gsave
false false false false 780.000000 [(XML) ] 0 63200 37100 541.666687 text
grestore
gsave
false false false false 780.000000 [(VERILOG) ] 0 63200 35000 541.666687 text
grestore
gsave
false false false false 780.000000 [(VIEWS) ] 0 63200 34300 541.666687 text
grestore
gsave
false false false false 780.000000 [(FSM) ] 0 63300 33600 541.666687 text
grestore
gsave
false false false false 780.000000 [(SIM) ] 0 61900 32800 541.666687 text
grestore
gsave
false false false false 780.000000 [(IP-XACT) ] 0 61900 38400 541.666687 text
grestore
gsave
false false false false 780.000000 [(XML) ] 0 63200 32000 541.666687 text
grestore
gsave
false false false false 780.000000 [(ICARUS) ] 0 63200 30900 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMP_VER_CFG_TEST) ] 0 63900 30200 541.666687 text
grestore
gsave
false false false false 780.000000 [(COV) ] 0 63200 29500 541.666687 text
grestore
gsave
false false false false 780.000000 [(LINT) ] 0 63200 28200 541.666687 text
grestore
gsave
false false false false 780.000000 [(VERILOG) ] 0 63200 26900 541.666687 text
grestore
gsave
false false false false 780.000000 [(SYN) ] 0 61900 25600 541.666687 text
grestore
gsave
false false false false 780.000000 [(ISE) ] 0 62800 25000 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMP_VER_CFG) ] 0 63400 24400 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMP_VER_CFG.XML) ] 0 64000 36300 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMP_VER_CFG.DESIGN.XML) ] 0 64000 35700 541.666687 text
grestore
gsave
false false false false 780.000000 [(CHILDREN) ] 0 60300 23300 541.666687 text
grestore
gsave
false false false false 780.000000 [(LIBRARY) ] 0 62200 22700 541.666687 text
grestore
47600 41200 47600 31700 10 line
49300 39300 49300 38100 10 line
49300 37300 49300 36600 10 line
50600 36600 50600 35800 10 line
51700 35900 51700 32200 10 line
52300 35300 52300 34300 10 line
52300 33600 52300 32600 10 line
gsave
false false false false 780.000000 [(WORK) ] 0 48000 31400 541.666687 text
grestore
58500 41000 58500 22700 10 line
61800 38900 61800 24500 10 line
63100 37800 63100 33600 10 line
63100 32600 63100 26900 10 line
gsave
false false false false 780.000000 [(COMP_VER_TB) ] 0 63900 31500 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMP_VER_TB) ] 0 63900 28900 541.666687 text
grestore
gsave
false false false false 780.000000 [(COMP_VER_TB) ] 0 63900 27600 541.666687 text
grestore
60200 40300 60200 22700 10 line
45600 64300 78700 64300 10 line
45600 63900 78700 63900 10 line
showpage
%%End
