eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;
#/****************************************************************************/
#/*                                                                          */
#/*   SOCGEN Design for Reuse toolset                                        */
#/*                                                                          */
#/*   Version 1.0.0                                                          */
#/*                                                                          */
#/*   Author(s):                                                             */
#/*      - John Eaton, z3qmtr45@gmail.com                                    */
#/*                                                                          */
#/****************************************************************************/
#/*                                                                          */
#/*                                                                          */
#/*             Copyright 2016 John T Eaton                                  */ 
#/*                                                                          */
#/* Licensed under the Apache License, Version 2.0 (the "License");          */
#/* you may not use this file except in compliance with the License.         */
#/* You may obtain a copy of the License at                                  */
#/*                                                                          */
#/*    http://www.apache.org/licenses/LICENSE-2.0                            */
#/*                                                                          */
#/* Unless required by applicable law or agreed to in writing, software      */
#/* distributed under the License is distributed on an "AS IS" BASIS,        */
#/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
#/* See the License for the specific language governing permissions and      */
#/* limitations under the License.                                           */
#/*                                                                          */
#/*                                                                          */
#/****************************************************************************/


############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;

$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
) || die "(use '$program_name -h' for help)";




##############################################################################
## Help option
##############################################################################
if ( $opt_h or $opt_help  ) 
  { print "\n run_coverage vendor  library";
    print "\n";
    exit 1;
  }


#/**********************************************************************/
#/*  Process each library by finding any ip-xact file in any component */
#/*                                                                    */
#/*  Each ip-xact file is parsed and it's filename and the names of any*/
#/*  modules that it uses are saved.                                   */
#/*                                                                    */
#/*                                                                    */
#/**********************************************************************/


my $home              = cwd();
my $vendor   ;
my $library  ;


my $prefix = yp::lib::get_workspace(); 

$_               = $ARGV[0];



if(/(\S+)__(\S+)/) 
     { 
     $vendor           = $1;
     $library          = $2;
     }





my $parser = XML::LibXML->new();



my @components   = yp::lib::find_components($vendor,$library);

foreach my $component (@components) 
   {

   my $socgen_filename              = yp::lib::find_componentConfiguration($vendor,$library,$component);
   if($socgen_filename)
   {

   my $socgen_file              = $parser->parse_file($socgen_filename);
   my $sim_library_path ;
   my $lib_comp_sep             = yp::lib::find_lib_comp_sep($vendor,$library,$component);
   my $sim_comp_path            = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:sim/socgen:comp_path/text()")->to_literal;

   if ($sim_comp_path)
      {
      $sim_library_path            ="${lib_comp_sep}${sim_comp_path}";
      }
   else
      {
      $sim_library_path            = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:sim/socgen:library_path/text()")->to_literal;
      }

   print "XXXX-   $vendor $library $component  $sim_library_path   \n";

   #/*********************************************************************************************/
   #/   create coverage database .cdd file                                                       */
   #/                                                                                            */
   #/*********************************************************************************************/

   foreach  my   $i_name ($socgen_file->findnodes("//socgen:componentConfiguration/socgen:sim/socgen:testbenches/socgen:testbench/socgen:tools/socgen:tool"))
      {
      my($tb_tool)     = $i_name ->findnodes('./text()')->to_literal ;
      my($tb_variant)  = $i_name ->findnodes('../../socgen:variant/text()')->to_literal ;
      my($tb_version)  = $i_name ->findnodes('../../socgen:version/text()')->to_literal ;

      if($tb_tool eq "coverage")
          {
          print "  COVERAGEs   $tb_tool          $tb_variant  $tb_version \n"; 
          chdir  "./${prefix}/${vendor}__${library}${sim_library_path}/cov/${tb_variant}";

          $cmd ="make build_cdd \n";
          if (system($cmd)) {}
      



          foreach  my   $i_name ($socgen_file->findnodes("//socgen:test/socgen:variant"))
              {
              my($test_variant)     = $i_name ->findnodes('./text()')->to_literal ;
              my($test_name)        = $i_name ->findnodes('../socgen:name/text()')->to_literal ;

              if($tb_variant eq $test_variant  )
                {
                print "  $tb_variant  $test_variant $test_name \n"; 
                $cmd ="make score_cov TEST=${test_name} \n";
                if (system($cmd)) {}
                }

              }

              $cmd ="make report_cov  \n";
              if (system($cmd)) {}

          }





          chdir $home;

      }








   }

}



