eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;
#/****************************************************************************/
#/*                                                                          */
#/*   SOCGEN Design for Reuse toolset                                        */
#/*                                                                          */
#/*   Version 1.0.0                                                          */
#/*                                                                          */
#/*   Author(s):                                                             */
#/*      - John Eaton, z3qmtr45@gmail.com                                    */
#/*                                                                          */
#/****************************************************************************/
#/*                                                                          */
#/*                                                                          */
#/*             Copyright 2016 John T Eaton                                  */ 
#/*                                                                          */
#/* Licensed under the Apache License, Version 2.0 (the "License");          */
#/* you may not use this file except in compliance with the License.         */
#/* You may obtain a copy of the License at                                  */
#/*                                                                          */
#/*    http://www.apache.org/licenses/LICENSE-2.0                            */
#/*                                                                          */
#/* Unless required by applicable law or agreed to in writing, software      */
#/* distributed under the License is distributed on an "AS IS" BASIS,        */
#/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
#/* See the License for the specific language governing permissions and      */
#/* limitations under the License.                                           */
#/*                                                                          */
#/*                                                                          */
#/****************************************************************************/


############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;
use Parallel::ForkManager;

$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
) || die "(use '$program_name -h' for help)";




##############################################################################
## Help option
##############################################################################
if ( $opt_h or $opt_help  ) 
  { print "\n run_sims vendor  library";
    print "\n";
    exit 1;
  }


#/**********************************************************************/
#/*  Process each library by finding any ip-xact file in any component */
#/*                                                                    */
#/*  Each ip-xact file is parsed and it's filename and the names of any*/
#/*  modules that it uses are saved.                                   */
#/*                                                                    */
#/*                                                                    */
#/**********************************************************************/


my $home              = cwd();
my $vendor ;
my $library  ;


my $prefix = yp::lib::get_workspace();
my $number_of_cpus = yp::lib::get_number_of_cpus();

$_               = $ARGV[0];



if(/(\S+)__(\S+)/) 
     { 
     $vendor           = $1;
     $library         = $2;
     }

my $parser = XML::LibXML->new();



my @components   = yp::lib::find_components($vendor,$library);

foreach my $component (@components) 
   {
   my $socgen_filename     = yp::lib::find_componentConfiguration($vendor,$library,$component);

   if($socgen_filename)
   {
   my $socgen_file     = $parser->parse_file($socgen_filename);
   my $sim_library_path ;
   my $lib_comp_sep             = yp::lib::find_lib_comp_sep($vendor,$library,$component);
   my $sim_comp_path            = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:sim/socgen:comp_path/text()")->to_literal;

   if ($sim_comp_path)
      {
      $sim_library_path            ="${lib_comp_sep}${sim_comp_path}";
      }
   else
      {
      $sim_library_path            = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:sim/socgen:library_path/text()")->to_literal;
      }




   #/*********************************************************************************************/
   #/   files for simulation                                                                     */
   #/                                                                                            */
   #/*********************************************************************************************/
my $cmd;
my @cmds = ();
my $manager = new Parallel::ForkManager( $number_of_cpus );


   foreach  my   $i_name ($socgen_file->findnodes("//socgen:componentConfiguration/socgen:sim/socgen:icarus/socgen:test/socgen:name"))
      {
      my($sim_name)     = $i_name ->findnodes('./text()')->to_literal ;
      my($sim_configuration)  = $i_name ->findnodes('../socgen:configuration/text()')->to_literal ;
      my($sim_variant)  = $i_name ->findnodes('../socgen:variant/text()')->to_literal ;
      $cmd ="./tools/simulation/run_icarus  $vendor   $library $sim_library_path $sim_name     $sim_variant \n";
      push @cmds,$cmd;
     }



    foreach  my   $i_name ($socgen_file->findnodes("//socgen:componentConfiguration/socgen:sim/socgen:verilator/socgen:test/socgen:name"))
      {
      my($sim_name)     = $i_name ->findnodes('./text()')->to_literal ;
      my($sim_configuration)  = $i_name ->findnodes('../socgen:configuration/text()')->to_literal ;
      my($sim_variant)  = $i_name ->findnodes('../socgen:variant/text()')->to_literal ;
      $cmd ="./tools/simulation/run_verilator  $vendor   $library $sim_library_path $sim_name     $sim_variant \n";
      if(system($cmd)){};
      }


     foreach $cmd (@cmds)
      {
      $manager->start and next;
      system($cmd);
      $manager->finish;
      }

     $manager->wait_all_children;
print "run_sims COMPLETE \n";

   }

}

