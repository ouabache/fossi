eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010-2011>  <Ouabache Design Works>              */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/

use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;
use BerkeleyDB;


$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.

my $parser = XML::LibXML->new();
my $home    = cwd();


#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/


my @abstractionDefinitions = yp::lib::find_abstractionDefinitions();

my $version;
my $component;
my $library;
my $vendor;


foreach my $abstractionDefinition (@abstractionDefinitions)
{
 ( $vendor,$library, $component ,$version) = split ':', $abstractionDefinition;

          print "${vendor}:${library}:${component}:${version}\n";
          print "\t--------------------------------------------------------------------------------------------------------\n";

          $filename ="tools/busdefs/Berkeley/${vendor}_${library}_${component}_${version}.dbm";

          $absDef_db   = new BerkeleyDB::Hash( -Filename => $filename, -Flags => DB_CREATE ) or die "Cannot open file: $!";




          my $spirit_file       = yp::lib::find_ipxact_abstractionDefinition($vendor,$library,$component,$version);

          print "\tFilename:  ${spirit_file}\n";
          unless ($spirit_file) {print "Error absDef file does not exist";}

          my $spirit_absDef_file   = $parser->parse_file($spirit_file);
          foreach my $absDef ($spirit_absDef_file->findnodes("//ipxact:abstractionDefinition/ipxact:vendor")) 
                {
                my($bd_vendor)         = $absDef->findnodes('./text()')->to_literal ;
                my($bd_library)        = $absDef->findnodes('../ipxact:library/text()')->to_literal ;
                my($bd_name)           = $absDef->findnodes('../ipxact:name/text()')->to_literal ;
                my($bd_version)        = $absDef->findnodes('../ipxact:version/text()')->to_literal ;
                print "\tVLNV-ad     ${bd_vendor}_${bd_library}_${bd_name}_${bd_version}\n";

                my %systemGroupNames = ();


                foreach my $bus_type ($spirit_absDef_file->findnodes("//ipxact:abstractionDefinition/ipxact:busType")) 
                   {
                   my($bt_vendor)        = $bus_type->findnodes('./@ipxact:vendor')->to_literal ;
                   my($bt_library)       = $bus_type->findnodes('./@ipxact:library')->to_literal ;
                   my($bt_name)          = $bus_type->findnodes('./@ipxact:name')->to_literal ;
                   my($bt_version)       = $bus_type->findnodes('./@ipxact:version')->to_literal ;
                   print "\tVLNV-bt     ${bt_vendor}_${bt_library}_${bt_name}_${bt_version}\n";

                   my $spirit_file       = yp::lib::find_ipxact_busDefinition($bt_vendor,$bt_library,$bt_name,$bt_version);

                   unless ($spirit_file) {print "ERROR: No bus definition\n";}
                   else
                     {
                     my $spirit_busDef_file   = $parser->parse_file($spirit_file);
                     foreach  my   $i_name ($spirit_busDef_file->findnodes("//ipxact:busDefinition/ipxact:systemGroupNames/ipxact:systemGroupName"))
                       {
                       my($sysgroup_name)       = $i_name ->findnodes('./text()')->to_literal;
                       print "\t     SystemGroup Name $sysgroup_name \n";
                       $systemGroupNames{$sysgroup_name} = 1;
                       }
                     }
                   } 

                foreach my $absDef ($spirit_absDef_file->findnodes("//ipxact:abstractionDefinition/ipxact:ports/ipxact:port/ipxact:logicalName")) 
                   {
                   my($logical_name)         = $absDef->findnodes('./text()')->to_literal ;
                   my($is_clock)             = $absDef->findnodes('../ipxact:wire/ipxact:qualifier/ipxact:isClock/text()')->to_literal ;
                   my($is_reset)             = $absDef->findnodes('../ipxact:wire/ipxact:qualifier/ipxact:isReset/text()')->to_literal ;
                   my($is_address)           = $absDef->findnodes('../ipxact:wire/ipxact:qualifier/ipxact:isAddress/text()')->to_literal ;
                   my($is_data)              = $absDef->findnodes('../ipxact:wire/ipxact:qualifier/ipxact:isData/text()')->to_literal ;
                   my($requires_driver)      = $absDef->findnodes('../ipxact:wire/ipxact:requiresDriver/text()')->to_literal ;
                   my($driver_type)          = $absDef->findnodes('../ipxact:wire/ipxact:requiresDriver/@ipxact:driverType')->to_literal ;
                   my($default_value)        = $absDef->findnodes('../ipxact:wire/ipxact:defaultValue/text()')->to_literal ;

                   print "\nPort:  ${logical_name} ";


               my $Key = "port__${logical_name}"    ;
               my @info  = ("$logical_name","$is_clock","$is_reset","$is_address","$is_data","$requires_driver","$driver_type","$default_value"         );
               $absDef_db->db_put( $Key, join(':', @info) );




                   
                   if($is_clock)    
                     {
                     if($is_reset)  { print "  BOTH CLOCK and RESET  ";}
                     else           { print "  CLOCK ";}
                     }
                   elsif($is_reset) { print "  RESET ";}
                   else             { print "  ";}

                   if($is_address) { print "  ADDRESS ";}
                   if($is_data) { print "  DATA ";}


                   if($requires_driver) {print " Requires Driver  $driver_type   ";}
                   else                 {print "   ";}

                   if($default_value)   {print " Default Value   $default_value  \n";}
                   else                 {print " \n";}

                   my $master_presence;
                   my $master_width;
                   my $master_direction;

                   foreach my $onMaster ($spirit_absDef_file->findnodes("//ipxact:abstractionDefinition/ipxact:ports/ipxact:port/ipxact:logicalName[text() = '$logical_name']/../ipxact:wire/ipxact:onMaster/ipxact:presence")) 
                    {
                    $master_presence    = $onMaster->findnodes('./text()')->to_literal ;
                    $master_width       = $onMaster->findnodes('../ipxact:width/text()')->to_literal ;
                    $master_direction   = $onMaster->findnodes('../ipxact:direction/text()')->to_literal ;
                    print "  onMaster presence    $master_presence \n";
                    #unless($master_width)     {$master_width = 1;}
                    if($master_width)  {print "  onMaster width       $master_width \n";}
                    if($master_direction) {print "  onMaster direction   $master_direction \n";}
                    print "\n";

                    my $Key = "master__${logical_name}"    ;
                    my @info  = ("$logical_name","$master_presence","$master_width","$master_direction"     );
                    $absDef_db->db_put( $Key, join(':', @info) );

                    }

                   my $slave_presence;
                   my $slave_width;
                   my $slave_direction;

                   foreach my $onSlave ($spirit_absDef_file->findnodes("//ipxact:abstractionDefinition/ipxact:ports/ipxact:port/ipxact:logicalName[text() = '$logical_name']/../ipxact:wire/ipxact:onSlave/ipxact:presence")) 
                    {
                    $slave_presence   = $onSlave->findnodes('./text()')->to_literal ;
                    $slave_width      = $onSlave->findnodes('../ipxact:width/text()')->to_literal ;
                    $slave_direction  = $onSlave->findnodes('../ipxact:direction/text()')->to_literal ;
                    print "  onSlave  presence    $slave_presence \n";
                    #unless($slave_width)     {$slave_width = 1;}
                    if($slave_width) {print "  onSlave  width       $slave_width \n";}
                    if($slave_direction) {print "  onSlave  direction   $slave_direction \n";}
                    print "\n";

                    my $Key = "slave__${logical_name}"    ;
                    my @info  = ("$logical_name","$slave_presence","$slave_width","$slave_direction"     );
                    $absDef_db->db_put( $Key, join(':', @info) );


                    }


                   my %systemGroupPresence= ();
                   my %systemGroupWidth= ();
                   my %systemGroupDirection= ();



                   foreach my $onSystem  ($spirit_absDef_file->findnodes("//ipxact:abstractionDefinition/ipxact:ports/ipxact:port/ipxact:logicalName[text() = '$logical_name']/../ipxact:wire/ipxact:onSystem/ipxact:group")) 
                    {
                    my($system_group)        = $onSystem->findnodes('./text()')->to_literal ;
                    my($presence)            = $onSystem->findnodes('../ipxact:presence/text()')->to_literal ;
                    my($width)               = $onSystem->findnodes('../ipxact:width/text()')->to_literal ;
                    my($direction)           = $onSystem->findnodes('../ipxact:direction/text()')->to_literal ;
                    print "  onSystem Group       $system_group \n";
                    print "  onSystem presence    $presence \n";
                    #unless($width)     {$width = 1;}
                    if($width){print "  onSystem width       $width \n";}
                    if($direction){print "  onSystem direction   $direction \n";}
                    print "\n";

                    my $Key = "syste,__${logical_name}"    ;
                    my @info  = ("$logical_name","$system_group","$presence","$width","$direction"     );
                    $absDef_db->db_put( $Key, join(':', @info) );


                    $systemGroupPresence{$system_group} =$presence  ;
                    $systemGroupWidth{$system_group} =$width  ;
                    $systemGroupDirection{$system_group} =$direction  ;
                    unless(   $systemGroupNames{$system_group}) {print "Group $system_group not defined in busDefinition \n"; }
                    }
# insert DRC checks here

                   }
                }

$absDef_db->db_close();
          print "\n";
          }

        
      


