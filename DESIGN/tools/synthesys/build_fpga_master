eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;
#/****************************************************************************/
#/*                                                                          */
#/*   SOCGEN Design for Reuse toolset                                        */
#/*                                                                          */
#/*   Version 1.0.0                                                          */
#/*                                                                          */
#/*   Author(s):                                                             */
#/*      - John Eaton, z3qmtr45@gmail.com                                    */
#/*                                                                          */
#/****************************************************************************/
#/*                                                                          */
#/*                                                                          */
#/*             Copyright 2016 John T Eaton                                  */ 
#/*                                                                          */
#/* Licensed under the Apache License, Version 2.0 (the "License");          */
#/* you may not use this file except in compliance with the License.         */
#/* You may obtain a copy of the License at                                  */
#/*                                                                          */
#/*    http://www.apache.org/licenses/LICENSE-2.0                            */
#/*                                                                          */
#/* Unless required by applicable law or agreed to in writing, software      */
#/* distributed under the License is distributed on an "AS IS" BASIS,        */
#/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
#/* See the License for the specific language governing permissions and      */
#/* limitations under the License.                                           */
#/*                                                                          */
#/*                                                                          */
#/****************************************************************************/






############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;
use Parallel::ForkManager;

$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
) || die "(use '$program_name -h' for help)";




##############################################################################
## Help option
##############################################################################
if ( $opt_h or $opt_help  ) 
  { print "\n build_master";
    print "\n";
    exit 1;
  }


my $parser = XML::LibXML->new();


my      @kids          = (  );
my      @filelist      = (  );



#/**********************************************************************/
#/*  Process each library by finding any ip-xact file in any component */
#/*                                                                    */
#/*  Each ip-xact file is parsed and it's filename and the names of any*/
#/*  modules that it uses are saved.                                   */
#/*                                                                    */
#/*                                                                    */
#/**********************************************************************/

my $home = cwd();

my $prefix   = yp::lib::get_workspace();
   $prefix   = "/${prefix}";

my @vendors = yp::lib::find_vendors();

foreach my $vendor (@vendors)
 {
 my $vendor_status    =  yp::lib::get_vendor_status($vendor);
 if($vendor_status eq "active") 
   { 
   my @libraries = yp::lib::find_libraries($vendor);
   foreach my $library (@libraries)
     {
     my $library_status   =  yp::lib::get_library_status($vendor,$library);
     if($library_status eq "active") 
         {
         run_vendor_library ( $vendor ,  $library)        
         }
     }
   }
 }




sub run_vendor_library
   {
   my @params     = @_;
   my $library    = pop(@params);
   my $vendor     = pop(@params);
   my $prefix          = yp::lib::get_workspace();
   my $number_of_cpus  = yp::lib::get_number_of_cpus();

   my @components   = yp::lib::find_components($vendor,$library);

   foreach my $component (@components) 
      {
      my $socgen_filename     = yp::lib::find_componentConfiguration($vendor,$library,$component);

      if($socgen_filename)
        {
        my $socgen_file     = $parser->parse_file($socgen_filename);
        my $syn_library_path ;
        my $lib_comp_sep    = yp::lib::find_lib_comp_sep($vendor,$library,$component);
        my $syn_comp_path   = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:syn/socgen:comp_path/text()")->to_literal;

        if ($syn_comp_path)
           {
           $syn_library_path ="${lib_comp_sep}${syn_comp_path}";
           }
        else
           {
           $syn_library_path = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:syn/socgen:library_path/text()")->to_literal;
           }

      #   print "XXXX-   $vendor $library $component  $syn_library_path   \n";

        #/*********************************************************************************************/
        #/   files for synthesys                                                                      */
        #/                                                                                            */
        #/*********************************************************************************************/
        my $cmd;
        my @cmds =();
        my $manager = new Parallel::ForkManager( $number_of_cpus );


        foreach  my   $i_name ($socgen_file->findnodes("//socgen:componentConfiguration/socgen:syn/socgen:fpgas/socgen:fpga/socgen:variant"))
           {
           my($chip_variant)     = $i_name ->findnodes('./text()')->to_literal ;
           my($chip_part)        = $i_name ->findnodes('../socgen:target/socgen:part/text()')->to_literal ;
	   my($chip_tool)        = $i_name ->findnodes('../socgen:tool/text()')->to_literal ;
           print "  FPGAs     $chip_variant       $chip_part  |||| $chip_tool   \n"; 
           if($chip_tool eq "ise")
            {
            $cmd ="./tools/synthesys/run_ise   $vendor $library $syn_library_path  $chip_variant    $chip_part  $chip_tool     \n";
            push @cmds,$cmd;
            }
           elsif($chip_tool eq "ara")
            {
            $cmd ="./tools/synthesys/run_ara   $vendor $library $syn_library_path  $chip_variant    $chip_part  $chip_tool     \n";
            push @cmds,$cmd;
            }
           }

        foreach $cmd (@cmds)
           {
           $manager->start and next;
           system($cmd);
           $manager->finish;
           }

        #   $manager->wait_all_children;
        print "build_fpgas COMPLETE \n";

        }
      }
   }


