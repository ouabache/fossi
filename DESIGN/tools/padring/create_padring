eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010-2016>  <Ouabache Design Works>              */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/




############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;

$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.

############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
           "vendor=s" => \$vendor,
           "library=s" => \$library,
           "component=s" => \$component,
           "version=s" => \$version,
           "core=s" => \$core,	   
           "rtl=s" => \$rtl,
           "xml=s" => \$xml
) || die "(use '$program_name -h' for help)";



##############################################################################
## Help option
##############################################################################
if ( $opt_h  or $opt_help) 
  { print "\n create_padring -vendor vendor_name  -library library_name  -component component_name path_to_pads_csv_from_cfgfile  pads_csv_file  ";
    print "\nEX: create_padring -vendor foo  -library bar  -component chip  ./pads/padring.csv   ";
    exit 1;
  }


##############################################################################
## 
##############################################################################

$home = cwd();


my    $pads_csv_path     = $ARGV[0];
my    $pads_csv          = $ARGV[1];


chomp($pads_csv_path);
chomp($pads_csv);




unless(defined $rtl)       {$rtl = "rtl";}
unless(defined $xml)       {$xml = "xml";}

unless(defined $pads_csv)  {print "pads_csv file missing \n";exit}
unless(defined $vendor)    { print "vendor missing \n";exit}
unless(defined $library)   { print "library missing \n";exit}
unless(defined $component) { print "component missing \n";exit}
unless(defined $version)   { $version = "padring";}
unless(defined $core)      { $core    = "core";}

my $parser = XML::LibXML->new();


my $component_repo           = yp::lib::find_component_repo($vendor,$library,$component);
my $lib_comp_sep             = yp::lib::find_lib_comp_sep($vendor,$library,$component);




$pads_csv ="${home}${component_repo}/${vendor}/${library}${lib_comp_sep}${component}/${pads_csv_path}${pads_csv}";

unless(-e $pads_csv)
{
print "file not exist:  $pads_csv  \n";
exit;
}




my @pad_list;
my %Pin_type;
my %Pin_dir;
my %Pin_port;
my %Pin_portDir;
my %Pad_type;
my %Pin_min;
my %Pin_max;
my %Has_in;
my %Has_out;
my %Has_oe;



$SRCFILE ="$pads_csv";
open(SRCFILE) or die("Could not open src file.  $SRCFILE ");
foreach $line (<SRCFILE>) 
    {
    chomp($line);
    $_ = $line;

if(/(\s+)/) {print " Syntax error: White space => $line \n" ;}




if(/(\S+),(\S+)/)
      {
      $remainder      =$1;
      $pin_ucf      =$2;

      }

    $_ = $remainder;
if(/(\S+),(\S+)/)
      {
      $remainder      =$1;
      $pin_reset      =$2;
      }

    $_ = $remainder;
if(/(\S+),(\S+)/)
      {
      $remainder      =$1;
      $pin_dir      =$2;
      }

      $_ = $remainder;

      if(/(\w+)[\[](\d+)[\]]/)
        {
        $pin_name    = $1;
        $pin_bit     = $2;
        $pin_type    = "vector";



        if(defined $Pin_min{$pin_name})
         {  if($Pin_min{$pin_name} gt $pin_bit) { $Pin_min{$pin_name} = $pin_bit;}      }
         else
         { $Pin_min{$pin_name} = $pin_bit ; }


        if(defined $Pin_max{$pin_name})
         {  if($Pin_max{$pin_name} lt $pin_bit) { $Pin_max{$pin_name} = $pin_bit;}      }
         else
         { $Pin_max{$pin_name} = $pin_bit ; }

         }
       else
        {

        $pin_name    = $remainder;
        $pin_bit     = "xx";
        $pin_type    = "scaler";
        }
	
        push (@pad_list,  "${pin_name}::${pin_type}::${pin_bit}::${pin_dir}::${pin_reset}::${pin_ucf}");


      if(defined $Pin_type{$pin_name})
      {  if($Pin_type{$pin_name} ne $pin_type) {print "Syntax Error: Pin type mismatch $line  \n";}      }
      else
      {$Pin_type{$pin_name} = $pin_type ; }


      if(defined $Pin_dir{$pin_name})
      {  if($Pin_dir{$pin_name} ne $pin_dir) {print "Syntax Error: Pin dir mismatch $line  \n";}      }
      else
      {$Pin_dir{$pin_name} = $pin_dir ; }
      
       if   ($pin_dir eq "in")
           {
	   $Pin_port{$pin_name} ="in" ;
	   $Pin_portDir{$pin_name} ="in" ;
	   $Pad_type{$pin_name} ="in" ;
           $Has_in{$pin_name}   = 1;
           $Has_out{$pin_name}  = 0;
           $Has_oe{$pin_name}   = 0;
            }
       elsif($pin_dir eq "out")
           {
	   $Pin_port{$pin_name} ="out";
	   $Pin_portDir{$pin_name} ="out" ;
	   $Pad_type{$pin_name} ="out" ;
           $Has_in{$pin_name}   = 0;
           $Has_out{$pin_name}  = 1;
           $Has_oe{$pin_name}   = 0;    
           } 
       elsif($pin_dir eq "inout")
           {
	   $Pin_port{$pin_name} ="io";
	   $Pin_portDir{$pin_name} ="inout" ;
	   $Pad_type{$pin_name} ="se" ;
           $Has_in{$pin_name}   = 1;
           $Has_out{$pin_name}  = 1;
           $Has_oe{$pin_name}   = 1;       
           }
       elsif($pin_dir eq "tsout")
           {
	   $Pin_port{$pin_name} ="out";
	   $Pin_portDir{$pin_name} ="out" ;
	   $Pad_type{$pin_name} ="ts" ;
           $Has_in{$pin_name}   = 0;
           $Has_out{$pin_name}  = 1;
           $Has_oe{$pin_name}   = 1;       
           }
       elsif($pin_dir eq "odout")
           {
	   $Pin_port{$pin_name} ="out";
	   $Pin_portDir{$pin_name} ="out" ;
	   $Pad_type{$pin_name} ="od" ;
           $Has_in{$pin_name}   = 0;
           $Has_out{$pin_name}  = 0;
           $Has_oe{$pin_name}   = 1;
           }
       elsif($pin_dir eq "odinout")
           {
	   $Pin_port{$pin_name} ="io";
	   $Pin_portDir{$pin_name} ="inout" ;
	   $Pad_type{$pin_name} ="se" ;
           $Has_in{$pin_name}   = 1;
           $Has_out{$pin_name}  = 0;
           $Has_oe{$pin_name}   = 1;       
           }
       else
           {
	   $Pin_port{$pin_name} ="XX";
	   $Pin_portDir{$pin_name} ="XX" ;
	   $Pad_type{$pin_name} ="XX" ;
           $Has_in{$pin_name}   = 0;       
           $Has_out{$pin_name}   = 0;       
           $Has_oe{$pin_name}   = 0;       
           }






}



my @names = keys %Pin_type;
@names      = sys::lib::trim_sort(@names);

#for my $name (@names){print "$name   [ $Pin_max{$name}  $Pin_min{$name}]     $Pin_type{$name}   $Pin_dir{$name}     \n"}









print " Processing  $vendor $library $component  $rtl  $xml \n ---->>  ${pads_csv} \n";

my $xml_file = "${home}${component_repo}/${vendor}/${library}${lib_comp_sep}${component}/${rtl}";
mkdir $xml_file,0755   unless( -e $xml_file );

my $xml_file = "${xml_file}/${xml}";
mkdir $xml_file,0755   unless( -e $xml_file );


#
# Create Padring component file
#


my $outfile = "${xml_file}/${component}_${version}.xml";

my $cmd = "cp ${home}/tools/padring/component_boilerplate ${outfile}\n";

if(system($cmd)){}

open COMP_FILE,">>$outfile" or die "unable to open $outfile";



print COMP_FILE  "<ipxact:vendor>${vendor}</ipxact:vendor> \n";
print COMP_FILE  "<ipxact:library>${library}</ipxact:library> \n";
print COMP_FILE  "<ipxact:name>${component}</ipxact:name> \n";
print COMP_FILE  "<ipxact:version>${version}</ipxact:version> \n";






print COMP_FILE  "\n <ipxact:busInterfaces> \n";

foreach $pin_name (@names)
  {
  $PIN_name   =  uc $pin_name;

  print COMP_FILE  " <ipxact:busInterface>                                                                                  \n";
  print COMP_FILE  " <ipxact:name>${PIN_name}</ipxact:name>                                                                \n";
  print COMP_FILE  " <ipxact:busType vendor=\"opencores.org\" library=\"Busdefs\" name=\"pad\" version=\"def\"/>           \n";     
  print COMP_FILE  " <ipxact:abstractionTypes><ipxact:abstractionType>                                                     \n";
  print COMP_FILE  "  <ipxact:abstractionRef  vendor=\"opencores.org\" library=\"Busdefs\" name=\"pad\" version=\"ring\"/>  \n";  
  print COMP_FILE  "    <ipxact:portMaps>                                                                                  \n";
  print COMP_FILE  "          <ipxact:portMap>                                                                             \n";
  print COMP_FILE  "	  <ipxact:logicalPort><ipxact:name>PAD_${Pin_port{$pin_name}}</ipxact:name></ipxact:logicalPort>   \n";
  print COMP_FILE  "          <ipxact:physicalPort><ipxact:name>${PIN_name}</ipxact:name>         \n";         

if($Pin_type{$pin_name} eq "vector")
  {
  print COMP_FILE  "   <ipxact:wire>         \n"; 
  print COMP_FILE  "   <ipxact:vectors><ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector></ipxact:vectors>         \n"; 
  print COMP_FILE  "   </ipxact:wire>         \n"; 
  }

  print COMP_FILE  "          </ipxact:physicalPort>            \n";         
  print COMP_FILE  "          </ipxact:portMap>                                                                            \n";
  print COMP_FILE  "    </ipxact:portMaps>                                                                                 \n";
  print COMP_FILE  "  </ipxact:abstractionType>     </ipxact:abstractionTypes>                                             \n";
  print COMP_FILE  "  <ipxact:master/>                                                                                     \n";
  print COMP_FILE  "  </ipxact:busInterface>                                                                               \n\n";
  }  


print COMP_FILE  "\n </ipxact:busInterfaces> \n ";
print COMP_FILE  "\n <ipxact:model> \n";
print COMP_FILE  "  <ipxact:instantiations> \n";
print COMP_FILE  "   <ipxact:designInstantiation> \n";
print COMP_FILE  "     <ipxact:name>Padring</ipxact:name> \n";
print COMP_FILE  "    <ipxact:designRef vendor=\"${vendor}\" library=\"${library}\" name=\"${component}\" version=\"${version}.design\"/> \n";
print COMP_FILE  "   </ipxact:designInstantiation> \n";
print COMP_FILE  "  </ipxact:instantiations> \n";
print COMP_FILE  " \n";
print COMP_FILE  "  <ipxact:views> \n";
print COMP_FILE  "    <ipxact:view> \n";
print COMP_FILE  "      <ipxact:name>Padring</ipxact:name> \n";
print COMP_FILE  "      <ipxact:designInstantiationRef>Padring</ipxact:designInstantiationRef> \n";
print COMP_FILE  "    </ipxact:view>   \n";  
print COMP_FILE  "  </ipxact:views> \n";
print COMP_FILE  "\n <ipxact:ports> \n";

foreach $pin_name (@names)
  {

  $PIN_name   =  uc $pin_name;
  print COMP_FILE  " <ipxact:port>  <ipxact:name>${PIN_name}</ipxact:name>                                                 \n";
  print COMP_FILE  " <ipxact:wire><ipxact:wireTypeDefs><ipxact:wireTypeDef><ipxact:typeName>wire</ipxact:typeName></ipxact:wireTypeDef></ipxact:wireTypeDefs>         \n";     
  print COMP_FILE  "  <ipxact:direction>${Pin_portDir{$pin_name}}</ipxact:direction>      \n";     
  if($Pin_type{$pin_name} eq "vector")
   {
  print COMP_FILE  "   <ipxact:vectors><ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector></ipxact:vectors>         \n"; 
   }
  print COMP_FILE  "   </ipxact:wire>         \n"; 
  print COMP_FILE  "  </ipxact:port>                                                                                \n\n";

  }  






print COMP_FILE  "\n </ipxact:ports> \n ";
print COMP_FILE  "\n </ipxact:model> \n ";
print COMP_FILE  "\n </ipxact:component> \n ";
close COMP_FILE;






#
# Create Padring design file
#


$outfile = "${xml_file}/${component}_${version}.design.xml";

my $cmd = "cp ${home}/tools/padring/design_boilerplate ${outfile}\n";

if(system($cmd)){}

open DESIGN_FILE,">>$outfile" or die "unable to open $outfile";

print DESIGN_FILE  "<ipxact:vendor>${vendor}</ipxact:vendor> \n";
print DESIGN_FILE  "<ipxact:library>${library}</ipxact:library> \n";
print DESIGN_FILE  "<ipxact:name>${component}</ipxact:name> \n";
print DESIGN_FILE  "<ipxact:version>${version}.design</ipxact:version> \n";



print DESIGN_FILE  "\n <ipxact:interconnections> \n";
foreach $pin_name (@names)
  {
  my $PIN_name   =  uc $pin_name;
  print DESIGN_FILE  " <ipxact:interconnection>                                                              \n";
  print DESIGN_FILE  " <ipxact:name>${PIN_name}</ipxact:name>                                                \n";
  print DESIGN_FILE  " <ipxact:activeInterface  componentRef=\"${pin_name}_pad\" busRef=\"pad_ring\">        \n";     
  print DESIGN_FILE  "    <ipxact:portMaps>                                                                  \n";
  print DESIGN_FILE  "          <ipxact:portMap>                                                             \n";
  print DESIGN_FILE  "	  <ipxact:logicalPort><ipxact:name>PAD_${Pin_port{$pin_name}}</ipxact:name></ipxact:logicalPort> \n";
  print DESIGN_FILE  "          <ipxact:physicalPort><ipxact:name>${PIN_name}</ipxact:name>                  \n";         


if($Pin_type{$pin_name} eq "vector")
  {
  print DESIGN_FILE  "   <ipxact:wire>         \n"; 
  print DESIGN_FILE  "   <ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector>\n"; 
  print DESIGN_FILE  "   </ipxact:wire>         \n"; 
  }

  print DESIGN_FILE  "       </ipxact:physicalPort>   </ipxact:portMap>                     \n";
  print DESIGN_FILE  "    </ipxact:portMaps>                                                \n";
  print DESIGN_FILE  "  </ipxact:activeInterface>                                           \n";
  print DESIGN_FILE  "  <ipxact:hierInterface busRef=\"${PIN_name}\"/>                      \n";
  print DESIGN_FILE  "  </ipxact:interconnection>                                           \n\n";


print DESIGN_FILE  " <ipxact:interconnection>                                             \n";
  print DESIGN_FILE  " <ipxact:name>${pin_name}</ipxact:name>                                               \n";
  print DESIGN_FILE  " <ipxact:activeInterface  componentRef=\"${pin_name}_pad\" busRef=\"pad\">            \n";     
  print DESIGN_FILE  "    <ipxact:portMaps>                                                                 \n";
  if ($Has_in{$pin_name} == 1)
  {
  print DESIGN_FILE  "          <ipxact:portMap>                                                             \n";
  print DESIGN_FILE  "	  <ipxact:logicalPort><ipxact:name>pad_in</ipxact:name></ipxact:logicalPort>         \n";
  print DESIGN_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_in</ipxact:name>                  \n";         
if($Pin_type{$pin_name} eq "vector")
  {
  print DESIGN_FILE  "   <ipxact:wire>         \n"; 
  print DESIGN_FILE  "   <ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector> \n"; 
  print DESIGN_FILE  "   </ipxact:wire>         \n"; 
  }  

  print DESIGN_FILE  "     </ipxact:physicalPort>     </ipxact:portMap>                      \n";
  }
  if ($Has_out{$pin_name} == 1)
  {
  print DESIGN_FILE  "          <ipxact:portMap>                                                         \n";
  print DESIGN_FILE  "	  <ipxact:logicalPort><ipxact:name>pad_out</ipxact:name></ipxact:logicalPort>    \n";
  print DESIGN_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_out</ipxact:name>                  \n";
if($Pin_type{$pin_name} eq "vector")
  {
  print DESIGN_FILE  "   <ipxact:wire>         \n"; 
  print DESIGN_FILE  "   <ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector>\n"; 
  print DESIGN_FILE  "   </ipxact:wire>         \n"; 
  }  
         
  print DESIGN_FILE  "         </ipxact:physicalPort> </ipxact:portMap>                                          \n";
  }
  if ($Has_oe{$pin_name} == 1)
  {
  print DESIGN_FILE  "          <ipxact:portMap>                                                               \n";
  print DESIGN_FILE  "	  <ipxact:logicalPort><ipxact:name>pad_oe</ipxact:name></ipxact:logicalPort>           \n";
  print DESIGN_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_oe</ipxact:name></ipxact:physicalPort>   \n";         
  print DESIGN_FILE  "          </ipxact:portMap>                                                              \n";
  }
  print DESIGN_FILE  "    </ipxact:portMaps>                                                                   \n";
  print DESIGN_FILE  "  </ipxact:activeInterface>                                                 \n";



print DESIGN_FILE  " <ipxact:activeInterface  componentRef=\"${core}\" busRef=\"${pin_name}_pad\">           \n";     
  print DESIGN_FILE  "    <ipxact:portMaps>                                                                    \n";
  if ($Has_in{$pin_name} == 1)
  {
  print DESIGN_FILE  "          <ipxact:portMap>                                                               \n";
  print DESIGN_FILE  "	  <ipxact:logicalPort><ipxact:name>${pin_name}_pad_in</ipxact:name></ipxact:logicalPort>           \n";
  print DESIGN_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_in</ipxact:name>             \n";         
if($Pin_type{$pin_name} eq "vector")
  {
  print DESIGN_FILE  "   <ipxact:wire>         \n"; 
  print DESIGN_FILE  "   <ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector> \n"; 
  print DESIGN_FILE  "   </ipxact:wire>         \n"; 
  }  

  print DESIGN_FILE  "          </ipxact:physicalPort></ipxact:portMap>                                         \n";
  }
  if ($Has_out{$pin_name} == 1)
  {
  print DESIGN_FILE  "          <ipxact:portMap>                                                                 \n";
  print DESIGN_FILE  "	  <ipxact:logicalPort><ipxact:name>${pin_name}_pad_out</ipxact:name></ipxact:logicalPort>            \n";
  print DESIGN_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_out</ipxact:name>              \n";         
if($Pin_type{$pin_name} eq "vector")
  {
  print DESIGN_FILE  "   <ipxact:wire>         \n"; 
  print DESIGN_FILE  "   <ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector>\n"; 
  print DESIGN_FILE  "   </ipxact:wire>         \n"; 
  }  

  print DESIGN_FILE  "       </ipxact:physicalPort>   </ipxact:portMap>                                           \n";
  }
  if ($Has_oe{$pin_name} == 1)
  {
  print DESIGN_FILE  "          <ipxact:portMap>                                                                     \n";
  print DESIGN_FILE  "	  <ipxact:logicalPort><ipxact:name>${pin_name}_pad_oe</ipxact:name></ipxact:logicalPort>                  \n";
  print DESIGN_FILE  "          <ipxact:physicalPort></ipxact:physicalPort><ipxact:name>${pin_name}_pad_oe</ipxact:name>  \n";         
  print DESIGN_FILE  "          </ipxact:portMap>                                                                         \n";
  }
  print DESIGN_FILE  "    </ipxact:portMaps>                                                                               \n";
  print DESIGN_FILE  "  </ipxact:activeInterface>                                                 \n";
  print DESIGN_FILE  "  </ipxact:interconnection>                                                                         \n\n";
  }


print DESIGN_FILE  "\n </ipxact:interconnections> \n ";

  print DESIGN_FILE  "\n <ipxact:componentInstances> \n\n";

  print DESIGN_FILE  " <ipxact:componentInstance>  <ipxact:instanceName>${core}</ipxact:instanceName>      \n";
  print DESIGN_FILE  " <ipxact:componentRef vendor=\"${vendor}\" library=\"${library}\" name=\"${component}\" version=\"${core}\" />         \n";     
  print DESIGN_FILE  "  </ipxact:componentInstance>                                                                                \n\n";

foreach $pin_name (@names)
  {


  print DESIGN_FILE  " <ipxact:componentInstance>  <ipxact:instanceName>${pin_name}_pad</ipxact:instanceName>      \n";
  print DESIGN_FILE  " <ipxact:componentRef vendor=\"opencores.org\" library=\"cde\" name=\"pad\" version=\"${Pad_type{$pin_name}}_dig\" />         \n";     
if($Pin_type{$pin_name} eq "vector")
  {
  my $width = $Pin_max{$pin_name} - $Pin_min{$pin_name} + 1  ; 
  print DESIGN_FILE  " <ipxact:configurableElementValues>      \n"; 
  print DESIGN_FILE  " <ipxact:configurableElementValue referenceId=\"WIDTH\">${width}</ipxact:configurableElementValue>      \n"; 
  print DESIGN_FILE  " </ipxact:configurableElementValues>      \n"; 
  }  


  print DESIGN_FILE  "  </ipxact:componentInstance>                                                                                \n\n";

  }  



print DESIGN_FILE  "\n </ipxact:componentInstances> \n ";
print DESIGN_FILE  "\n </ipxact:design> \n ";

close DESIGN_FILE;



#
# Create core component file
#




my $outfile = "${xml_file}/${component}_${core}.xml";

my $cmd = "cp ${home}/tools/padring/component_boilerplate ${outfile}\n";

if(system($cmd)){}

open COMP_FILE,">>$outfile" or die "unable to open $outfile";

print COMP_FILE  "<ipxact:vendor>${vendor}</ipxact:vendor> \n";
print COMP_FILE  "<ipxact:library>${library}</ipxact:library> \n";
print COMP_FILE  "<ipxact:name>${component}</ipxact:name> \n";
print COMP_FILE  "<ipxact:version>${core}</ipxact:version> \n";


print COMP_FILE  "\n <ipxact:busInterfaces> \n";

foreach $pin_name (@names)
  {

  print COMP_FILE  " <ipxact:busInterface>                                                                                  \n";
  print COMP_FILE  " <ipxact:name>${pin_name}_pad</ipxact:name>                                                             \n";
  print COMP_FILE  " <ipxact:busType vendor=\"opencores.org\" library=\"Busdefs\" name=\"pad\" version=\"def\"/>            \n";     
  print COMP_FILE  " <ipxact:abstractionTypes><ipxact:abstractionType>                                                      \n";
  print COMP_FILE  "  <ipxact:abstractionRef  vendor=\"opencores.org\" library=\"Busdefs\" name=\"pad\" version=\"rtl\"/>  \n";  
  print COMP_FILE  "    <ipxact:portMaps>                                                                                   \n";
 if($Has_in{$pin_name})
  {
 print COMP_FILE  "          <ipxact:portMap>                                                                              \n";
  print COMP_FILE  "	  <ipxact:logicalPort><ipxact:name>pad_in</ipxact:name></ipxact:logicalPort>                       \n";
  print COMP_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_in</ipxact:name>      \n";         
if($Pin_type{$pin_name} eq "vector")
  {
  print COMP_FILE  "   <ipxact:wire>         \n"; 
  print COMP_FILE  "   <ipxact:vectors><ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector></ipxact:vectors>         \n"; 
  print COMP_FILE  "   </ipxact:wire>         \n"; 
  }
  print COMP_FILE  "         </ipxact:physicalPort> </ipxact:portMap>                                                                             \n";
  }
 if($Has_out{$pin_name})
  {
  print COMP_FILE  "          <ipxact:portMap>                                                                              \n";
  print COMP_FILE  "	  <ipxact:logicalPort><ipxact:name>pad_out</ipxact:name></ipxact:logicalPort>                       \n";
  print COMP_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_out</ipxact:name>   \n";         
if($Pin_type{$pin_name} eq "vector")
  {
  print COMP_FILE  "   <ipxact:wire>         \n"; 
  print COMP_FILE  "   <ipxact:vectors><ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector></ipxact:vectors>         \n"; 
  print COMP_FILE  "   </ipxact:wire>         \n"; 
  }
  print COMP_FILE  "      </ipxact:physicalPort>    </ipxact:portMap>                                                                             \n";
  }
 if($Has_oe{$pin_name})
  {
  print COMP_FILE  "          <ipxact:portMap>                                                                              \n";
  print COMP_FILE  "	  <ipxact:logicalPort><ipxact:name>pad_oe</ipxact:name></ipxact:logicalPort>                       \n";
  print COMP_FILE  "          <ipxact:physicalPort><ipxact:name>${pin_name}_pad_oe</ipxact:name></ipxact:physicalPort>     \n";         
  print COMP_FILE  "          </ipxact:portMap>                                                                             \n";
  }
  print COMP_FILE  "    </ipxact:portMaps>                                                                                  \n";
  print COMP_FILE  "  </ipxact:abstractionType>     </ipxact:abstractionTypes>                                              \n";
  print COMP_FILE  "  <ipxact:master/>                                                                                      \n";
  print COMP_FILE  "  </ipxact:busInterface>                                                                                \n\n";

  }  


print COMP_FILE  "\n </ipxact:busInterfaces> \n ";
print COMP_FILE  "\n <ipxact:model> \n";
print COMP_FILE  "  <ipxact:instantiations> \n";
print COMP_FILE  "   <ipxact:designInstantiation> \n";
print COMP_FILE  "     <ipxact:name>Core</ipxact:name> \n";
print COMP_FILE  "    <ipxact:designRef vendor=\"${vendor}\" library=\"${library}\" name=\"${component}\" version=\"${core}.design\"/> \n";
print COMP_FILE  "   </ipxact:designInstantiation> \n";
print COMP_FILE  "  </ipxact:instantiations> \n";
print COMP_FILE  " \n";
print COMP_FILE  "  <ipxact:views> \n";
print COMP_FILE  "    <ipxact:view> \n";
print COMP_FILE  "      <ipxact:name>Core</ipxact:name> \n";
print COMP_FILE  "      <ipxact:designInstantiationRef>Core</ipxact:designInstantiationRef> \n";
print COMP_FILE  "    </ipxact:view>   \n";  
print COMP_FILE  "  </ipxact:views> \n";
print COMP_FILE  "\n <ipxact:ports> \n";

foreach $pin_name (@names)
  {


if($Has_in{$pin_name})
  {
  print COMP_FILE  " <ipxact:port>  <ipxact:name>${pin_name}_pad_in</ipxact:name>                             \n";
  print COMP_FILE  " <ipxact:wire><ipxact:wireTypeDefs><ipxact:wireTypeDef><ipxact:typeName>wire</ipxact:typeName></ipxact:wireTypeDef></ipxact:wireTypeDefs>  \n";
  print COMP_FILE  "  <ipxact:direction>in</ipxact:direction>                                                    \n";
  if($Pin_type{$pin_name} eq "vector")
   {
  print COMP_FILE  "   <ipxact:vectors><ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector></ipxact:vectors>         \n"; 
   }

  print COMP_FILE  "  </ipxact:wire></ipxact:port>                                                                                \n\n";
  }


if($Has_out{$pin_name})
  {
  print COMP_FILE  " <ipxact:port>  <ipxact:name>${pin_name}_pad_out</ipxact:name>                             \n";
  print COMP_FILE  " <ipxact:wire><ipxact:wireTypeDefs><ipxact:wireTypeDef><ipxact:typeName>wire</ipxact:typeName></ipxact:wireTypeDef></ipxact:wireTypeDefs>  \n";
  print COMP_FILE  "  <ipxact:direction>out</ipxact:direction>                                                     \n";
  if($Pin_type{$pin_name} eq "vector")
   {
  print COMP_FILE  "   <ipxact:vectors><ipxact:vector><ipxact:left>$Pin_max{$pin_name}</ipxact:left><ipxact:right>$Pin_min{$pin_name}</ipxact:right></ipxact:vector></ipxact:vectors>         \n"; 
   }
  print COMP_FILE  "  </ipxact:wire></ipxact:port>                                                                                \n\n";
  }


if($Has_oe{$pin_name})
  {
  print COMP_FILE  " <ipxact:port>  <ipxact:name>${pin_name}_pad_oe</ipxact:name>                             \n";
  print COMP_FILE  " <ipxact:wire><ipxact:wireTypeDefs><ipxact:wireTypeDef><ipxact:typeName>wire</ipxact:typeName></ipxact:wireTypeDef></ipxact:wireTypeDefs>  \n";
  print COMP_FILE  "  <ipxact:direction>out</ipxact:direction></ipxact:wire>                                                     \n";
  print COMP_FILE  "  </ipxact:port>                                                                                \n\n";
  }
}  


print COMP_FILE  "\n </ipxact:ports> \n ";
print COMP_FILE  "\n </ipxact:model> \n ";
print COMP_FILE  "\n </ipxact:component> \n ";

close COMP_FILE;


#
# Create Core design file
#

$outfile = "${xml_file}/${component}_${core}.design.xml";

my $cmd = "cp ${home}/tools/padring/design_boilerplate ${outfile}\n";

if(system($cmd)){}

open DESIGN_FILE,">>$outfile" or die "unable to open $outfile";

print DESIGN_FILE  "<ipxact:vendor>${vendor}</ipxact:vendor> \n";
print DESIGN_FILE  "<ipxact:library>${library}</ipxact:library> \n";
print DESIGN_FILE  "<ipxact:name>${component}</ipxact:name> \n";
print DESIGN_FILE  "<ipxact:version>${core}.design</ipxact:version> \n";

print DESIGN_FILE  "\n </ipxact:design> \n ";

close DESIGN_FILE;



$outfile ="${home}${component_repo}/${vendor}/${library}${lib_comp_sep}${component}/${pads_csv_path}padring.pcf";

print "creating  $outfile  \n";

open ARA_FILE,">$outfile" or die "unable to open $outfile";

foreach $pad (@pad_list)
 {
 ( ${pin_name},${pin_type},${pin_bit},${pin_dir},${pin_reset},${pin_ucf}) = split( /::/ , $pad);
 $pin_name = uc $pin_name;
if (${pin_type} eq "vector")
   {
   print ARA_FILE  "set_io ${pin_name}[${pin_bit}]  ${pin_ucf}    \n";
   }
 else
   {
   print ARA_FILE  "set_io ${pin_name} ${pin_ucf}    \n";
   }
}

close ARA_FILE;



$outfile ="${home}${component_repo}/${vendor}/${library}${lib_comp_sep}${component}/${pads_csv_path}pads.ise";

print "creating  $outfile  \n";

open ISE_FILE,">$outfile" or die "unable to open $outfile";

foreach $pad (@pad_list) {


 ( ${pin_name},${pin_type},${pin_bit},${pin_dir},${pin_reset},${pin_ucf}) = split( /::/ , $pad);
 $pin_name = uc $pin_name;
if (${pin_type} eq "vector")
   {
   print ISE_FILE  "NET  \"${pin_name}<${pin_bit}>\"  lOC=\"${pin_ucf}\"; \n";
   }
 else
   {
   print ISE_FILE  "NET  \"${pin_name}\"  LOC=\"${pin_ucf}\";\n";
   }




}

close ISE_FILE;



1



