eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;
#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010-2012>  <Ouabache Design Works>              */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/



############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;


$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################

Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
           "envidentifier=s" => \$envidentifier,
           "prefix=s" => \$prefix,
           "vendor=s" => \$vendor,
           "library=s" => \$library,
           "component=s" => \$component,
           "version=s" => \$version,
           "dest_dir=s" => \$dest_dir,
           "view=s" => \$view
) || die "(use '$program_name -h' for help)";


##############################################################################
## Help option
##############################################################################
if ( $opt_h  or ($opt_help) ) 
   { 
   print "\n gen_verilogLib -envidentifier *simulation* -prefix /work  -vendor vendor_name -library  library_name  -component component_name -version version_name -dest_dir dest_dir";
   print "\n";
   exit 1;
   }


##############################################################################
## 
##############################################################################

my $parser = XML::LibXML->new();

my $socgen_file               = $parser->parse_file(yp::lib::find_componentConfiguration($vendor,$library,$component));
my $ip_name_base_macro       = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:ip_name_base_macro/text()")->to_literal;




$home = cwd();
my @search_paths = ();
my $variant;


 if($version)       {$variant   = "${component}_${version}";}
 else               {$variant   = "${component}";}

my $lib_comp_sep    = yp::lib::find_lib_comp_sep($vendor,$library,$component);
my $comp_xml_sep    = yp::lib::find_comp_xml_sep($vendor,$library,$component,$version);
my $module_name     = yp::lib::get_module_name($vendor,$library,$component,$version);   








my $parser = XML::LibXML->new();
my $spirit_component_file    = $parser->parse_file(yp::lib::find_ipxact_component($vendor,$library,$component,$version));




#print "\n XXXXXXXXX  Building $view  VHDL  RTL for  $prefix $library  $component $verison  $variant  $dest_dir  \n" ;

my $path  = "${home}${prefix}/${vendor}__${library}${lib_comp_sep}${component}${comp_xml_sep}/${dest_dir}";
mkdir $path,0755             unless( -e $path );



my $path  = "${home}${prefix}/${vendor}__${library}${lib_comp_sep}${component}${comp_xml_sep}/${dest_dir}/../filelists";
mkdir $path,0755             unless( -e $path );


my $outfile ="${home}${prefix}/${vendor}__${library}${lib_comp_sep}${component}${comp_xml_sep}/${dest_dir}/../filelists/${variant}.VHDL";
open FILELIST,">$outfile" or die "unable to open $outfile";


my  @filelist =       yp::lib::parse_component_brothers("$vendor","$library","$component","$version");

foreach $line (@filelist) 
   {
   $_ = $line;
   if(/::(\S+)::(\S+)::(\S+)::(\S+)::/) 
     { 
     $new_library        = $2;
     $new_component      = $3;
     $new_vendor         = $1;
     $new_version        = $4;                

#     print " FFFFFFFFFFFFFFFF  Brother      $new_vendor  $new_library  $new_component $new_version \n" ;

    my $spirit_component_file    = $parser->parse_file(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_component,$new_version));

    foreach my $comp_view ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:envIdentifier[./text() = '$envidentifier']")) 
      {
      my($view_name)     = $comp_view->findnodes('../ipxact:name/text()')->to_literal ;
      my($view_fileset)  = $comp_view->findnodes('../ipxact:fileSetRef/ipxact:localName/text()')->to_literal ;
#      print " FFFFFFFFFFFFFFFF  Found  $view_name  $view_fileset    \n" ;





    #/**********************************************************************/
    #/*                                                                    */
    #/* build a fileset in the following order                             */
    #/*                                                                    */
    #/* deflist for module names                                           */
    #/* all include files                                                  */
    #/* all module files                                                   */
    #/*                                                                    */
    #/*                                                                    */
    #/**********************************************************************/
   

   
    foreach  my   $i_name ($spirit_component_file->findnodes("//ipxact:fileSets/ipxact:fileSet/ipxact:file/ipxact:name"))
       {      
       my($file_name)          = $i_name ->findnodes('./text()')->to_literal ;
       my($file_logicalname)   = $i_name ->findnodes('../ipxact:logicalName/text()')->to_literal ;
       my($file_type)          = $i_name ->findnodes('../ipxact:fileType/text()')->to_literal ;
       my($file_usertype)      = $i_name ->findnodes('../ipxact:userFileType/text()')->to_literal ;
       my($view_file)          = $i_name ->findnodes('../../ipxact:name/text()')->to_literal ;


       if(($file_usertype eq "module") && ($view_file eq $view_fileset) &&   ($file_type eq "vhdlSource")                     )
         { 
         print FILELIST         "${home}${prefix}/${vendor}__${library}${lib_comp_sep}${component}${comp_xml_sep}/${file_name}\n";
         };


       }




    foreach  my   $i_name ($spirit_component_file->findnodes("//ipxact:fileSets/ipxact:fileSet/ipxact:file/ipxact:name"))
       {      
       my($file_name)          = $i_name ->findnodes('./text()')->to_literal ;
       my($file_logicalname)   = $i_name ->findnodes('../ipxact:logicalName/text()')->to_literal ;
       my($file_type)          = $i_name ->findnodes('../ipxact:fileType/text()')->to_literal ;
       my($file_usertype)      = $i_name ->findnodes('../ipxact:userFileType/text()')->to_literal ;
       my($view_file)          = $i_name ->findnodes('../../ipxact:name/text()')->to_literal ;



       if(($file_usertype eq "module") && ($view_file eq $view_fileset) &&   ($file_type eq "vhdlSource")                     )
         { 


         my $file_out  =  "${home}${prefix}/${vendor}__${library}${lib_comp_sep}${component}${comp_xml_sep}/${dest_dir}/${file_logicalname}.v";
 

         $cmd ="repeater   filelist $outfile    out $file_out  top  $file_logicalname   \n";

         print $cmd;


         if (system($cmd)) {}

         };


       }


      }
     }
   }

   

1
    














