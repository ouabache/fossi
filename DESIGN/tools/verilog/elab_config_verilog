eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;
#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*                                                                    */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010-2011>  <Ouabache Design Works>              */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/


############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use Scalar::Util qw(looks_like_number);
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;
use math::lib;
use BerkeleyDB;


$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
           "envidentifier=s" => \$envidentifier,
           "prefix=s" => \$prefix,
           "vendor=s" => \$vendor,
           "library=s" => \$library,
           "component=s" => \$component,
           "version=s" => \$version,
           "configuration=s" => \$configuration,
           "dest_dir=s" => \$dest_dir

) || die "(use '$program_name -h' for help)";



##############################################################################
## Help option
##############################################################################
if ( $opt_h  or $opt_help  ) 
  { print "\n elab_config_verilog -envidentifier {sim/syn}  -prefix /work -vendor vendor_name -library library_name  -component component_name  -version version_name -env env -tool tool -unit unit -name name     \n";
    exit 1;
  }



#############################################################################
## 
## 
#############################################################################

$home = cwd();

 





my $root                =      "root";



print "elab_config_verilog  ${vendor}_${library}_${component}_${version}   $configuration \n";


my $parser = XML::LibXML->new();



my $path;

my $design_db_file  = yp::lib::get_design_db_file;
my $design_db       = new BerkeleyDB::Hash( -Filename => "$design_db_file", -Flags => DB_CREATE ) or die "Cannot open $design_db_file: $!";





my $elab_db_file = yp::lib::get_elab_db_filename($vendor,$library,$component,$version,$configuration);

if(-e $elab_db_file)
  {
  exit ;
   "$elab_db_file Exists\n";
  }

print "ELAB_CONFIG_VERILOG ${vendor}_${library}_${component}_${version}_${configuration} ||  || $elab_db_file   \n";


my $elab_db  = new BerkeleyDB::Hash( -Filename => "$elab_db_file", -Flags => DB_CREATE ) or die "Cannot open $elab_db_file: $!";
$elab_db->db_put( "component___root" ,"${vendor}:${library}:${component}:${version}:${configuration}"  );

my $repo_data;

$elab_db->db_get("VLNV___${vendor}:${library}:${component}:${version}:${configuration}", $repo_data );
$elab_db->db_put("VLNV___${vendor}:${library}:${component}:${version}:${configuration}","${repo_data}${root}:::"     );


my $c_key;
my $c_value;
my $param_str;
my $config___;

my @params = ();

my $c_cursor = $design_db ->db_cursor() ;
      while ($c_cursor->c_get($c_key, $c_value, DB_NEXT) == 0) 
          {
          if($c_value eq $configuration)
           {

            ( $config___ , $param_str) = split( /___/ , $c_key);
#             print "XXXXX  $param_str  \n";
            ( @params) = split( /:::/ , $param_str);
           }




          }

my $status = $c_cursor->c_close() ;


foreach my $param (@params)
{
my $p_name;
my $p_value;
( $p_name , $p_value) = split( /--/ , $param);
#print "XXXXXX  ${root}    $p_name  $p_value \n";
$elab_db->db_put( "parameter_${root}__${p_name}","${p_value}"  );
}



elaborate( "${root}","${vendor}","${library}","${component}","${version}"  );





# Now tag all component___root  instances with config_n #

my $key;
my $value;

my @elab_puts;


my $v_cursor = $elab_db ->db_cursor() ;
while ($v_cursor->c_get($key, $value, DB_NEXT) == 0) 
    {
    $_ = $key;
    if(/component___root\.(\S+)/) 
      {
      my $p_key;
      my $p_value;
      my $p_cursor = $elab_db ->db_cursor() ;
      my $match = "parameter_root.$1__";
      my $p_config = "CONFIG___";
      my @param_store;

      while ($p_cursor->c_get($p_key, $p_value, DB_NEXT) == 0) 
          {
          $_ = $p_key;
          if(/${match}(\S+)/) 
            {
            push @param_store,"${1}--${p_value}";
            }
          }
       my $status = $p_cursor->c_close() ;
       @param_store      = sys::lib::trim_sort(@param_store);
       my $p_store;
       foreach my $store (@param_store)
                 {
                 $p_store = "${store}:::${p_store}";
                 }

       my $config_n;
       $design_db->db_get("${p_config}${p_store}", $config_n );
#            print "D $key     $value       ${config_n}  \n";
         push @elab_puts ,"$key|||$value:${config_n}";
      }
    }

my $status = $v_cursor->c_close() ;

foreach my $elab_put (@elab_puts)
      {
      ( ${key},${value}) = split( /\|\|\|/ , $elab_put);
       $elab_db->db_put( $key,$value);
      }


$elab_db->db_close();
$design_db->db_close();




















#/*********************************************************************************************/
#/                                                                                            */
#/  Recursive entry point for all lower levels                                                */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/

sub elaborate
   {
   my @params     = @_;
   my $elab_version        = pop(@params);
   my $elab_component      = pop(@params);
   my $elab_library        = pop(@params);
   my $elab_vendor         = pop(@params);
   my $elab_root           = pop(@params);

#   print "ELABORATING $elab_root  $elab_vendor $elab_library $elab_component $elab_version \n";
   my $spirit_component_file    = $parser->parse_file(yp::lib::find_ipxact_component($elab_vendor,$elab_library,$elab_component,$elab_version));
   parse_component_file($spirit_component_file,$elab_root);
   parse_design_files($spirit_component_file,$elab_root);
#   print "Exit $elab_root   \n";
   return;
}




#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/




sub parse_component_file
   {
   my @params     = @_;
   my $elab_root                 = pop(@params);
   my $spirit_component_file      = pop(@params);



foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:vendor")) 
   {
   my($new_vendor)          = $new_comp->findnodes('./text()')->to_literal ;
   my($new_library)         = $new_comp->findnodes('../ipxact:library/text()')->to_literal ;
   my($new_name)            = $new_comp->findnodes('../ipxact:name/text()')->to_literal ;
   my($new_version)         = $new_comp->findnodes('../ipxact:version/text()')->to_literal ;
#   print "PARSE component file $elab_root $new_vendor $new_library $new_name    $new_version         \n";


  my $parent_socgen_filename              = yp::lib::find_componentConfiguration($new_vendor,$new_library,$new_name);

  if ($parent_socgen_filename)      

    { 

  my $parent_socgen_file    = $parser->parse_file($parent_socgen_filename);
        foreach my $socgen_cfg ($parent_socgen_file->findnodes("//socgen:componentConfiguration/socgen:configurations/socgen:configuration/socgen:version[text() = '$new_version']/../socgen:parameters/socgen:parameter/socgen:name")) 
          {
          my($param_name)         = $socgen_cfg->findnodes('./text()')->to_literal ;
          my($param_default)      = $socgen_cfg->findnodes('../socgen:value/text()')->to_literal ;


#          print "KKKKKKKK  parameter_${elab_root}__${param_name}   $param_default \n";

        my $repo_data;
        $elab_db->db_get("parameter_${elab_root}__${param_name}", $repo_data );


        unless (defined $repo_data)
            {
            $elab_db->db_put( "parameter_${elab_root}__${param_name}","${param_default}"  );


                }



          }

     };

     #/**********************************************************************/
     #/*                                                                    */
     #/* parse parameters and values                                        */
     #/*                                                                    */
     #/**********************************************************************/
         
     foreach  my   $i_name ($spirit_component_file->findnodes('//ipxact:model/ipxact:modelParameters/ipxact:modelParameter/ipxact:name'))
        {
        my($parameter_name)     = $i_name ->to_literal;
        my($parameter_default)  = $i_name ->findnodes('../ipxact:value/text()')->to_literal ;
        my $repo_data;
        $elab_db->db_get("parameter_${elab_root}__${parameter_name}", $repo_data );


        unless (defined $repo_data)
            {
            $elab_db->db_put( "parameter_${elab_root}__${parameter_name}","${parameter_default}"  );
                }
        }
    }

foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:vendorExtensions/ipxact:componentRef")) 
   {
    my($new_vendor)        = $new_comp->findnodes('./@ipxact:vendor')->to_literal ;
    my($new_library)       = $new_comp->findnodes('./@ipxact:library')->to_literal ;
    my($new_name)          = $new_comp->findnodes('./@ipxact:name')->to_literal ;
    my($new_version)       = $new_comp->findnodes('./@ipxact:version')->to_literal ;
    if(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_name,$new_version))
     {
     parse_component_file($parser->parse_file(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_name,$new_version)),$elab_root    );
     }

   }
}






#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/




sub parse_design_files
   {
   my @params     = @_;
   my $elab_root    = pop(@params);
   my $spirit_component_file      = pop(@params);




  foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:vendorExtensions/ipxact:componentRef")) 
    {
            my($new_vendor)        = $new_comp->findnodes('./@ipxact:vendor')->to_literal ;
            my($new_library)       = $new_comp->findnodes('./@ipxact:library')->to_literal ;
            my($new_name)          = $new_comp->findnodes('./@ipxact:name')->to_literal ;
            my($new_version)       = $new_comp->findnodes('./@ipxact:version')->to_literal ;
#            print "PARSE design files $elab_root $new_vendor $new_library $new_name    $new_version         \n";
            parse_design_files($parser->parse_file(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_name,$new_version )),$elab_root );
   }




  foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:hierarchyRef")) 
    {
            my($new_vendor)        = $new_comp->findnodes('./@ipxact:vendor')->to_literal ;
            my($new_library)       = $new_comp->findnodes('./@ipxact:library')->to_literal ;
            my($new_name)          = $new_comp->findnodes('./@ipxact:name')->to_literal ;
            my($new_version)       = $new_comp->findnodes('./@ipxact:version')->to_literal ;
            if(yp::lib::find_ipxact_design($new_vendor,$new_library,$new_name,$new_version ))
              {
#              print "FFFFFF $new_vendor $new_library $new_name    $new_version     hierarchyRef    \n";
              parse_design_file($parser->parse_file(yp::lib::find_ipxact_design($new_vendor,$new_library,$new_name,$new_version )),$elab_root   );
              }
  }


   foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:designInstantiationRef/text()")) 
     {
     my($designInsref_value)         = $new_comp  ->to_literal ;
     my($designInsref_name)          = $new_comp  ->findnodes('../../ipxact:name')->to_literal ;
     foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:instantiations/ipxact:designInstantiation")) 
        {
	my($t_ref)           = $new_comp->findnodes('./ipxact:name/text()')->to_literal ;
	my($t_vendor)        = $new_comp->findnodes('./ipxact:designRef/@vendor')->to_literal ;
	my($t_library)       = $new_comp->findnodes('./ipxact:designRef/@library')->to_literal ;
	my($t_name)          = $new_comp->findnodes('./ipxact:designRef/@name')->to_literal ;
	my($t_version)       = $new_comp->findnodes('./ipxact:designRef/@version')->to_literal ;


        if($t_ref eq $designInsref_name )
	{

         if(yp::lib::find_ipxact_design($t_vendor,$t_library,$t_name,$t_version ))
              {
#              print "FFFFFF $t_vendor $t_library $t_name    $t_version     designInstantiationRef    \n";
              parse_design_file($parser->parse_file(yp::lib::find_ipxact_design($t_vendor,$t_library,$t_name,$t_version )),$elab_root   );
              }



        }
        }
     }




}



































#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/




sub parse_design_file
   {
   my @params     = @_;
   my $elab_root               = pop(@params);
   my $spirit_design_file      = pop(@params);

   foreach my $new_comp ($spirit_design_file->findnodes("//ipxact:design/ipxact:vendor")) 
     {
     my($new_vendor)          = $new_comp->findnodes('./text()')->to_literal ;
     my($new_library)         = $new_comp->findnodes('../ipxact:library/text()')->to_literal ;
     my($new_name)            = $new_comp->findnodes('../ipxact:name/text()')->to_literal ;
     my($new_version)         = $new_comp->findnodes('../ipxact:version/text()')->to_literal ;
  #   print "WARNING  $new_vendor $new_library $new_name $new_version  DESIGN \n";

     foreach  my   $x_name ($spirit_design_file->findnodes("//ipxact:design/ipxact:componentInstances/ipxact:componentInstance/ipxact:instanceName"))
            {
            #/**********************************************************************/
            #/*                                                                    */
            #/* Lookup VLNV for each instantiated component                        */
            #/*                                                                    */
            #/**********************************************************************/
            my($instance_name)       = $x_name   ->findnodes('./text()')->to_literal ;
            my($vendor_name)         = $x_name  ->findnodes('../ipxact:componentRef/@vendor')->to_literal ;
            my($library_name)        = $x_name  ->findnodes('../ipxact:componentRef/@library')->to_literal ;
            my($component_name)      = $x_name  ->findnodes('../ipxact:componentRef/@name')->to_literal ;
            my($version_name)        = $x_name  ->findnodes('../ipxact:componentRef/@version')->to_literal ;
       #     print "INSTANCED $instance_name  $vendor_name $library_name $component_name $version_name   \n";
            $elab_db->db_put( "component___${elab_root}.${instance_name}","${vendor_name}:${library_name}:${component_name}:${version_name}"  );

            my $repo_data;
            if(defined $name && length $name >0)
            {
            $elab_db->db_get("VLNV___${vendor_name}:${library_name}:${component_name}:${version_name}:${name}", $repo_data );
            $elab_db->db_put("VLNV___${vendor_name}:${library_name}:${component_name}:${version_name}:${name}","${repo_data}${elab_root}.${instance_name}:::");
            }
            else
            {
            $elab_db->db_get("VLNV___${vendor_name}:${library_name}:${component_name}:${version_name}", $repo_data );
            $elab_db->db_put("VLNV___${vendor_name}:${library_name}:${component_name}:${version_name}","${repo_data}${elab_root}.${instance_name}:::");
            }
            my $cmd ="./tools/verilog/elab_verilog -vendor ${vendor_name} -library ${library_name} -component ${component_name} -version ${version_name}\n";

  ####          if(system($cmd)){}



            if  ($instance_name)
              {  
            foreach  my   $i_parameter ($spirit_design_file->findnodes("//ipxact:componentInstance[ipxact:instanceName/text() = '$instance_name']/ipxact:configurableElementValues/ipxact:configurableElementValue/\@ipxact:referenceId"))
             {
             my($foo_name)       = $i_parameter ->to_literal ;
             my($foo_value)      = $i_parameter ->findnodes('../text()')->to_literal ;

             my $fee_value       = $foo_value;
             my $p_key;
             my $p_value;
             my $p_cursor = $elab_db ->db_cursor() ;
             while ($p_cursor->c_get($p_key, $p_value, DB_NEXT) == 0) 
                 {
                 $_ = $p_key;
                 #   print  "--->  $p_key   $p_value   \n";
                 if(/parameter_${elab_root}__(\S+)/) 
                   {
                   $fee_value   = math::lib::parse($fee_value,$1,$p_value);
                   }
                 }
              my $status = $p_cursor->c_close() ;

            



# replace this!!! 
#  scan for all names in db_get("parameter_${elab_root}__${name}", $repo_data
# and substitute $repo_data anywhere in $foo_value
# then run $foo_value thru sys/math

 
             $_ = $foo_value;
             my $t_name;
             my $t_op;
             my $repo_data;  

             if(/(\S+)[+](\S+)/) 
              {
              $t_name = $1;
              $t_op   = $2;
              $elab_db->db_get("parameter_${elab_root}__${t_name}", $repo_data );
              unless  (defined $repo_data) 
               {
               $repo_data = $foo_value ;
               }
              else
               {
               $repo_data = $repo_data + $t_op ;
               }
              }
             else

# end replace

              {
              $elab_db->db_get("parameter_${elab_root}__${foo_value}", $repo_data );
              unless  (defined $repo_data) 
               {
               $repo_data = $foo_value ;
               }
              }

              $elab_db->db_put( "parameter_${elab_root}.${instance_name}__${foo_name}","${repo_data}"  );
              $elab_db->db_put( "Parameter_${elab_root}.${instance_name}__${foo_name}","${foo_value}"  );
              $elab_db->db_put( "Xarameter_${elab_root}.${instance_name}__${foo_name}","${fee_value}"  );
#             print "PARAMETERE  ${elab_root}.${instance_name}   $foo_name  p_  $repo_data   P_ $foo_value  X_  $fee_value \n";
             }

             elaborate( "${elab_root}.${instance_name}","${vendor_name}","${library_name}","${component_name}","${version_name}"  );
             }
            }
      }
   }




1