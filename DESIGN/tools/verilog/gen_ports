eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;
#/****************************************************************************/
#/*                                                                          */
#/*   SOCGEN Design for Reuse toolset                                        */
#/*                                                                          */
#/*   Version 1.0.0                                                          */
#/*                                                                          */
#/*   Author(s):                                                             */
#/*      - John Eaton, z3qmtr45@gmail.com                                    */
#/*                                                                          */
#/****************************************************************************/
#/*                                                                          */
#/*                                                                          */
#/*             Copyright 2016 John T Eaton                                  */ 
#/*                                                                          */
#/* Licensed under the Apache License, Version 2.0 (the "License");          */
#/* you may not use this file except in compliance with the License.         */
#/* You may obtain a copy of the License at                                  */
#/*                                                                          */
#/*    http://www.apache.org/licenses/LICENSE-2.0                            */
#/*                                                                          */
#/* Unless required by applicable law or agreed to in writing, software      */
#/* distributed under the License is distributed on an "AS IS" BASIS,        */
#/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
#/* See the License for the specific language governing permissions and      */
#/* limitations under the License.                                           */
#/*                                                                          */
#/*                                                                          */
#/****************************************************************************/


############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use Scalar::Util qw(looks_like_number);
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;
use BerkeleyDB;


$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
           "vendor=s" => \$vendor,
           "library=s" => \$library,
           "version=s" => \$version,
           "component=s" => \$component,
           "debug","verbose"
) || die "(use '$program_name -h' for help)";


##############################################################################
## Help option
##############################################################################
if ( $opt_h  or $opt_help  ) 
  { print "\n gen_ports   - -vendor vendor_name -library library_name  -component component_name  -version version_name  \n";
    exit 1;
  }






#############################################################################
## 
## 
#############################################################################


$home = cwd();


my $variant;

if($version)       {$variant   = "${component}_${version}";}
else               {$variant   = "${component}";}


my $main_module_name = yp::lib::get_module_name($vendor,$library,$component,$version) ;
my $parser = XML::LibXML->new();


my $spirit_component_file    = $parser->parse_file(yp::lib::find_ipxact_component($vendor,$library,$component,$version));

print "\n GEN_ports     $vendor $library $component $version         \n";



my $io_ports  = yp::lib::get_io_ports() ;




my $path  = "${home}/${io_ports}";
   mkdir $path,0755             unless( -e $path );
   $path  = "${home}/${io_ports}/${vendor}__${library}";
   mkdir $path,0755             unless( -e $path );
   $path  = "${home}/${io_ports}/${vendor}__${library}/${component}";
   mkdir $path,0755             unless( -e $path );
   $path  ="${path}/${main_module_name}";
   mkdir $path,0755             unless( -e $path );


   $outfile    ="${path}/busses.txt";

   if(-e ${outfile} )
     {
     # print " $outfile Exists, exiting \n";
     exit 0
     }

#   print " $outfile Does not Exist, creating \n";
   open  DEST_FILE,">$outfile" or die "unable to open $outfile";
 

   $outfile = yp::lib::get_io_busses_db_filename($vendor,$library,$component,$version,"default");
   $busses_db   = new BerkeleyDB::Hash( -Filename => $outfile, -Flags => DB_CREATE ) or die "Cannot open ${outfile}: $!";



#   print "XXXXXXXX   $outfile           GEN_PORTS CREATE \n";
   process_design_files($spirit_component_file);
   parse_component_file($spirit_component_file);

   my $key;
   my $value;


   my @bus_list;


   my $cursor = $busses_db ->db_cursor() ;
   while ($cursor->c_get($key, $value, DB_NEXT) == 0) 
   {

                 ( ${key_type},${busref},${conn}) = split( /\./ , $key);
                 ( ${log_name},${direction},${type},${vector},${left},${right},${phy_name}) = split ':', $value;
                 if(($key_type eq "BusRef"))
                    {
                    push (@bus_list,  "${busref}_${conn}     ${phy_name}  ${log_name}   ${direction}  ${type}  ${vector}   ${left}:${right}    ");
                    }
                 else
                    {

                    }

   }

   my $status = $cursor->c_close() ;


   $busses_db   -> db_close();




   @bus_list      = sys::lib::trim_sort(@bus_list);

   foreach $list (@bus_list) 
      { print DEST_FILE  "${list}\n";}


#   print "XXXXXXXX   $outfile  GEN_PORTS CLOSED \n";


#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/




sub parse_component_file
   {
   my @params     = @_;
   my $spirit_component_file      = pop(@params);


   foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:vendorExtensions/ipxact:componentRef")) 
    {
    my($new_vendor)        = $new_comp->findnodes('./@ipxact:vendor')->to_literal ;
    my($new_library)       = $new_comp->findnodes('./@ipxact:library')->to_literal ;
    my($new_name)          = $new_comp->findnodes('./@ipxact:name')->to_literal ;
    my($new_version)       = $new_comp->findnodes('./@ipxact:version')->to_literal ;
    if(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_name,$new_version))
     {
     parse_component_file($parser->parse_file(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_name,$new_version))    );
     }
   }





     #/**********************************************************************/
     #/*                                                                    */
     #/*                                                                    */
     #/*                                                                    */
     #/**********************************************************************/

foreach my $bus_iface ($spirit_component_file->findnodes("//ipxact:component/ipxact:busInterfaces/ipxact:busInterface/ipxact:slave"))
        {
        my $busInterface_name          = $bus_iface->findnodes('../ipxact:name/text()')->to_literal ;
        my $memMap_name                = $bus_iface->findnodes('./ipxact:memoryMapRef/@ipxact:memoryMapRef')->to_literal ;


        foreach my $bus_iface ($spirit_component_file->findnodes("//ipxact:busInterface[ipxact:name/text() = '$busInterface_name']/ipxact:slave/ipxact:bridge")) 
          {
          my($bridge_map)        = $bus_iface->findnodes('./@ipxact:masterRef')->to_literal ;


          foreach my $mem_map ($spirit_component_file->findnodes("//ipxact:component/ipxact:memoryMaps/ipxact:memoryMap[ipxact:name/text() = '$memMap_name']/ipxact:subspaceMap[ipxact:name/text() = '$bridge_map']/ipxact:baseAddress"))
              {
#               my $xxx         = $mem_map->findnodes('../ipxact:subspaceMap/@ipxact:masterRef')->to_literal ;
               my $add         = $mem_map->findnodes('./text()')->to_literal ;
               my $int_base_addr    = hex($add);

                  my $repo_data;
                  $busses_db->db_get( "AbsDef.${busInterface_name}.bridge", $repo_data );
                  $busses_db->db_put( "AbsDef.${busInterface_name}.bridge","${bridge_map}..${int_base_addr}::${repo_data}" );






          foreach my $addSpace_map ($spirit_component_file->findnodes("//ipxact:component/ipxact:addressSpaces/ipxact:addressSpace[ipxact:name/text() = '$bridge_map']/ipxact:range"))
               { 
               my $range         = $addSpace_map->findnodes('./text()')->to_literal ;
               my $int_range    = hex($range);
             $busses_db->db_put( "BlkDef.${busInterface_name}.${bridge_map}","${int_base_addr}::${int_range}::8" );
#             print "FFFFFFF RANGE    BlkDef.${busInterface_name}.${bridge_map}   ${int_base_addr}::${int_range}::8   \n";
               }

              }

          }



        foreach my $mem_map ($spirit_component_file->findnodes("//ipxact:component/ipxact:memoryMaps/ipxact:memoryMap[ipxact:name/text() = '$memMap_name']/ipxact:bank/ipxact:addressBlock"))
                {
                     my($addB_name)        = $mem_map->findnodes('./ipxact:name/text()')->to_literal ;
                     my($baseAdd)          = $mem_map->findnodes('../ipxact:baseAddress/text()')->to_literal ;
                     my($range)            = $mem_map->findnodes('./ipxact:range/text()')->to_literal ;
                     my($width)            = $mem_map->findnodes('./ipxact:width/text()')->to_literal ;
                     my $int_baseAdd      = hex($baseAdd);
                     my $int_range      = hex($range);
                     $busses_db->db_put( "BlkDef.${memMap_name}.${addB_name}","${int_baseAdd}::${int_range}::${width}" );
                     }





        foreach my $mem_map ($spirit_component_file->findnodes("//ipxact:component/ipxact:memoryMaps/ipxact:memoryMap[ipxact:name/text() = '$memMap_name']/ipxact:bank/ipxact:addressBlock/ipxact:register"))
                {
                     my($reg_name)         = $mem_map->findnodes('./ipxact:name/text()')->to_literal ;
                     my($bank_name)        = $mem_map->findnodes('../../../ipxact:name/text()')->to_literal ;
                     my($reg_offset)       = $mem_map->findnodes('./ipxact:addressOffset/text()')->to_literal ;
                     my($reg_size)         = $mem_map->findnodes('./ipxact:size/text()')->to_literal ;
                     my($reg_access)       = $mem_map->findnodes('./ipxact:access/text()')->to_literal ;
                     my $int_reg_offset    = hex($reg_offset);
                     $busses_db->db_put( "RegDef.${bank_name}.${reg_name}","${int_reg_offset}::${reg_name}::${reg_size}::${reg_access}" );
#                     print "FFFFFFF REGISTER  ${bank_name}.${reg_name}    ${reg_offset}::${reg_size}::${reg_access}   \n";
                     }













}











 
















     #/**********************************************************************/
     #/*                                                                    */
     #/* Read each  busInterface and save master/slave direction            */
     #/*                                                                    */
     #/**********************************************************************/


     my @mas_slave;

     push @mas_slave  , "master"; 
     push @mas_slave  , "slave"; 

     foreach $seek_type (@mas_slave) 
        { 

         foreach my $bus_iface ($spirit_component_file->findnodes("//ipxact:component/ipxact:busInterfaces/ipxact:busInterface/ipxact:${seek_type}")) 
            {
            my($mmm_cname)         = $bus_iface->findnodes('../ipxact:name/text()')->to_literal ;
            my($mmm_vendor)        = $bus_iface->findnodes('../ipxact:abstractionTypes/ipxact:abstractionType/ipxact:abstractionRef/@vendor')->to_literal ;
            my($mmm_library)       = $bus_iface->findnodes('../ipxact:abstractionTypes/ipxact:abstractionType/ipxact:abstractionRef/@library')->to_literal ;
            my($mmm_name)          = $bus_iface->findnodes('../ipxact:abstractionTypes/ipxact:abstractionType/ipxact:abstractionRef/@name')->to_literal ;
            my($mmm_version)       = $bus_iface->findnodes('../ipxact:abstractionTypes/ipxact:abstractionType/ipxact:abstractionRef/@version')->to_literal ;
   


            if($mmm_cname)
              {
              $busses_db->db_put( "AbsDef.${mmm_cname}.${seek_type}","${mmm_vendor}:${mmm_library}:${mmm_name}:${mmm_version}"  );
              }

            foreach my $port_face ($spirit_component_file->findnodes('//ipxact:component/ipxact:busInterfaces/ipxact:busInterface/ipxact:abstractionTypes/ipxact:abstractionType/ipxact:portMaps/ipxact:portMap/ipxact:logicalPort')) 
               {
               my($rrr_log_name)      = $port_face->findnodes('./ipxact:name/text()')->to_literal ;
               my($rrr_int_name)      = $port_face->findnodes('../../../../../ipxact:name/text()')->to_literal ;
               my($rrr_phy_name)      = $port_face->findnodes('../ipxact:physicalPort/ipxact:name/text()')->to_literal ;
               my($rrr_type_name)     = $port_face->findnodes('../ipxact:physicalPort/ipxact:wireTypeDefs/ipxact:wireTypeDef/ipxact:typeName/text()')->to_literal ;
               my($rrr_left_value)    = $port_face->findnodes('../ipxact:physicalPort/ipxact:wire/ipxact:vectors/ipxact:vector/ipxact:left/text()')->to_literal ;
               my($rrr_right_value)   = $port_face->findnodes('../ipxact:physicalPort/ipxact:wire/ipxact:vectors/ipxact:vector/ipxact:right/text()')->to_literal ;
    
               unless ($rrr_type_name)  {$rrr_type_name = "wire";}
               unless ($rrr_phy_name)   {$rrr_phy_name  = ${rrr_log_name} ;}
    
               if(   $mmm_cname  eq  $rrr_int_name )
                 {
                 my $absDef_filename = yp::lib::get_absDef_db_filename($mmm_vendor,$mmm_library,$mmm_name,$mmm_version);
                 $absDef_db   = new BerkeleyDB::Hash( -Filename => $absDef_filename, -Flags => DB_CREATE ) or die "Cannot open ${absDef_filename}: $!";

                  my $abs_data;
                  $absDef_db->db_get("${seek_type}__${rrr_log_name}", $abs_data );

                 ( $berk_name, $berk_presence,$berk_width,$berk_direction ) = split ':', $abs_data;                      
                 my        $rrr_direction = $berk_direction;
                



                 if($rrr_left_value ne "")
                     { 
                      $berk_vector = "vector";
                      }
                  else                
                      { 
                      $berk_vector = "scaler";
                      $rrr_left_value = "none";
                      $rrr_right_value = "none";
                       } 



                  uplift_busref(${mmm_cname},${rrr_log_name},${rrr_direction},${rrr_type_name},${berk_vector},${rrr_left_value},${rrr_right_value},${rrr_phy_name});



                  $absDef_db->db_close();              
                 }
               }
        }
     }




     #/**********************************************************************/
     #/*                                                                    */
     #/* Read all ports and store into array                                */
     #/*                                                                    */
     #/**********************************************************************/

     foreach  my   $i_name ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:ports/ipxact:port/ipxact:name"))
        {
        my($port_name)       = $i_name ->findnodes('./text()')->to_literal ;
        my($direction)       = $i_name ->findnodes('../ipxact:wire/ipxact:direction/text()')->to_literal ;
        my($left)            = $i_name ->findnodes('../ipxact:wire/ipxact:vectors/ipxact:vector/ipxact:left/text()')->to_literal ;
        my($right)           = $i_name ->findnodes('../ipxact:wire/ipxact:vectors/ipxact:vector/ipxact:right/text()')->to_literal ;
        my($type)            = $i_name ->findnodes('../ipxact:wire/ipxact:wireTypeDefs/ipxact:wireTypeDef/ipxact:typeName/text()')->to_literal ;

        unless (defined $type) {$type = "wire";}
	
        if    ($direction eq "in")  { $direction = "input";}
        elsif ($direction eq "out") { $direction = "output";}


        my $vector;
        $vector  ="vector";

        if($left ne "")  
           { 

           }
        else       
           { 
           $vector = "scaler";
           $left   = "none";
           $right  = "none";
           }


           uplift_busref("adhoc", ${port_name} , ${direction}, ${type} , ${vector},${left},${right},${port_name} );


        }
 
}





#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/




sub process_design_files
   {
   my @params     = @_;
   my $spirit_component_file      = pop(@params);

   #print "\n";


  foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:vendorExtensions/ipxact:componentRef")) 
    {
            my($new_vendor)        = $new_comp->findnodes('./@ipxact:vendor')->to_literal ;
            my($new_library)       = $new_comp->findnodes('./@ipxact:library')->to_literal ;
            my($new_name)          = $new_comp->findnodes('./@ipxact:name')->to_literal ;
            my($new_version)       = $new_comp->findnodes('./@ipxact:version')->to_literal ;
            process_design_files($parser->parse_file(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_name,$new_version )) );
    }



  foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:hierarchyRef")) 
    {
            my($new_vendor)        = $new_comp->findnodes('./@ipxact:vendor')->to_literal ;
            my($new_library)       = $new_comp->findnodes('./@ipxact:library')->to_literal ;
            my($new_name)          = $new_comp->findnodes('./@ipxact:name')->to_literal ;
            my($new_version)       = $new_comp->findnodes('./@ipxact:version')->to_literal ;
            if( yp::lib::find_ipxact_design($new_vendor,$new_library,$new_name,$new_version )  )
              {
              #print "FFFFFFF  $new_vendor $new_library $new_name $new_version hierarchyRef \n"; 
              process_design_file($parser->parse_file(yp::lib::find_ipxact_design($new_vendor,$new_library,$new_name,$new_version )) );
              }
    }




   foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:views/ipxact:view/ipxact:designInstantiationRef/text()")) 
     {
     my($designInsref_value)         = $new_comp  ->to_literal ;
     my($designInsref_name)          = $new_comp  ->findnodes('../../ipxact:name')->to_literal ;


   foreach my $new_comp ($spirit_component_file->findnodes("//ipxact:component/ipxact:model/ipxact:instantiations/ipxact:designInstantiation")) 
        {
	my($t_ref)           = $new_comp->findnodes('./ipxact:name/text()')->to_literal ;
	my($t_vendor)        = $new_comp->findnodes('./ipxact:designRef/@vendor')->to_literal ;
	my($t_library)       = $new_comp->findnodes('./ipxact:designRef/@library')->to_literal ;
	my($t_name)          = $new_comp->findnodes('./ipxact:designRef/@name')->to_literal ;
	my($t_version)       = $new_comp->findnodes('./ipxact:designRef/@version')->to_literal ;

        if($t_ref eq $designInsref_name )
	{
            if( yp::lib::find_ipxact_design($t_vendor,$t_library,$t_name,$t_version )  )
              {
              #print "FFFFFFF  $t_vendor $t_library $t_name $t_version designgInstantiationRef \n"; 
              process_design_file($parser->parse_file(yp::lib::find_ipxact_design($t_vendor,$t_library,$t_name,$t_version )) );
              }

        }

        }

     }







}


#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/


sub process_design_file
   {
   my @params     = @_;
   my $spirit_design_file      = pop(@params);

   foreach my $new_comp ($spirit_design_file->findnodes("//ipxact:design/ipxact:vendor")) 
     {
     my($new_vendor)          = $new_comp->findnodes('./text()')->to_literal ;
     my($new_library)         = $new_comp->findnodes('../ipxact:library/text()')->to_literal ;
     my($new_name)            = $new_comp->findnodes('../ipxact:name/text()')->to_literal ;
     my($new_version)         = $new_comp->findnodes('../ipxact:version/text()')->to_literal ;
     #   print "XXXXXX-  $new_vendor $new_library $new_name $new_version  DESIGN \n";
     }

   foreach  my   $i_name ($spirit_design_file->findnodes("//ipxact:design/ipxact:componentInstances/ipxact:componentInstance/ipxact:instanceName"))
        {
        my($instance_name)       = $i_name ->findnodes('./text()')->to_literal ;
        my($vendor_name)         = $i_name  ->findnodes('../ipxact:componentRef/@vendor')->to_literal ;
        my($library_name)        = $i_name  ->findnodes('../ipxact:componentRef/@library')->to_literal ;
        my($component_name)      = $i_name  ->findnodes('../ipxact:componentRef/@name')->to_literal ;
        my($version_name)        = $i_name  ->findnodes('../ipxact:componentRef/@version')->to_literal ;
        my $module_name          = yp::lib::get_module_name($vendor_name,$library_name,$component_name,$version_name) ;
        my $inst_path             = "${home}/${io_ports}/${vendor_name}__${library_name}/${component_name}";

        my $file =  "$inst_path/${module_name}";
        if(-e $file) { # print "XXXXXXXX   $file  Exists \n"; 
                     }
        else
          {
#           print "XXXXXXXX   $file           Doesn't Exist \n";          
          $cmd = "./tools/verilog/gen_ports    -vendor $vendor_name -library $library_name  -component $component_name  -version $version_name   ";
          if (system($cmd)) {}


          }

        }



            #/**********************************************************************/
            #/*                                                                    */
            #/* Hierarchical connections  1685_2014 style                          */
            #/*                                                                    */
            #/**********************************************************************/

        foreach  my   $i_name ($spirit_design_file->findnodes('//ipxact:interconnections/ipxact:interconnection/ipxact:hierInterface/@busRef'))
        {

        my($hierConn_name)                   = $i_name ->to_literal ;
        my($hierConn_comref_name)            = $i_name ->findnodes('../../ipxact:activeInterface/@componentRef')->to_literal ;
        my($hierConn_busref_name)            = $i_name ->findnodes('../../ipxact:activeInterface/@busRef')->to_literal ;

        process_hier ( $hierConn_comref_name,$hierConn_name,$hierConn_busref_name  , $spirit_design_file);
        }







     #/*******************************************************************************/
     #/*                                                                             */
     #/* Read each  interconnection         */
     #/*                                                                             */
     #/*******************************************************************************/





        foreach  my  $i_name ($spirit_design_file->findnodes('//ipxact:interconnections/ipxact:interconnection/ipxact:activeInterface'))
           {
           my($lp_componentref_name)   = $i_name ->findnodes('./@componentRef')->to_literal ;
           my($lp_busref_name)         = $i_name ->findnodes('./@busRef')->to_literal ;
           my($lp_interconnect_name)   = $i_name ->findnodes('../ipxact:name/text()')->to_literal ;

           my $repo_data;
           $busses_db->db_get( "AbsDef.${lp_interconnect_name}.interconnect" , $repo_data );
           $busses_db->db_put( "AbsDef.${lp_interconnect_name}.interconnect","${lp_componentref_name}..${lp_busref_name}::${repo_data}"  );
           $busses_db->db_put( "Instance.${lp_componentref_name}.${lp_busref_name}","${lp_interconnect_name}"  );
           }








     #/**************************************************************************/
     #/*                                                                        */
     #/* Read each  interconnection and enter sub signals into wire_decs        */
     #/*                                                                        */
     #/**************************************************************************/




     foreach  my   $i_name ($spirit_design_file->findnodes('//ipxact:interconnections/ipxact:interconnection/ipxact:activeInterface/@componentRef'))
        {
        my($hierConn_comref_name)            = $i_name ->to_literal;
        my($hierConn_busref_name)            = $i_name ->findnodes('../@busRef')->to_literal ;
        my($hierConn_name)                   = $i_name ->findnodes('../../ipxact:name/text()')->to_literal ;


     #/*******************************************************************************/
     #/*                                                                             */
     #/* Read each  interconnection and enter modified signals into wire_decs        */
     #/*                                                                             */
     #/*******************************************************************************/





        foreach  my  $i_name ($spirit_design_file->findnodes('//ipxact:interconnections/ipxact:interconnection/ipxact:activeInterface/ipxact:portMaps/ipxact:portMap/ipxact:logicalPort/ipxact:name'))
           {
           my($lp_name)                = $i_name ->to_literal;
           my($lp_pname)               = $i_name ->findnodes('../../ipxact:physicalPort/ipxact:name/text()')->to_literal ;
           my($lp_left)                = $i_name ->findnodes('../../ipxact:physicalPort/ipxact:wire/ipxact:vector/ipxact:left/text()')->to_literal ;
           my($lp_right)               = $i_name ->findnodes('../../ipxact:physicalPort/ipxact:wire/ipxact:vector/ipxact:right/text()')->to_literal ;
           my($lp_componentref_name)   = $i_name ->findnodes('../../../../@componentRef')->to_literal ;
           my($lp_busref_name)         = $i_name ->findnodes('../../../../@busRef')->to_literal ;
           my($lp_interconnect_name)   = $i_name ->findnodes('../../../../../ipxact:name/text()')->to_literal ;
           $lp_vector = "vector";


           if ( $lp_pname eq '' ) { $lp_pname ="${lp_interconnect_name}_${lp_name}";}
           if ( $lp_left  eq '' ) 
              { 
              $lp_left ="none";
              $lp_vector = "scaler";
              }
           if ( $lp_right eq '' ) 
              { 
              $lp_right ="none";
              $lp_vector = "scaler";
              }



           if( ($hierConn_name eq $lp_interconnect_name) &&  ( $hierConn_comref_name  eq   $lp_componentref_name  )            )
             {
#             print  "TTTTTTTTTTTT  ${lp_pname}_${lp_name}  => ${lp_interconnect_name}_${lp_name}   ${lp_pname}   $lp_left  $lp_right   $lp_busref_name   \n";

                 if(${lp_vector} eq "vector")
                     {
                     unless( looks_like_number($lp_left) ) { $lp_left=0;}
                     }

              uplift_busref(${hierConn_name},${lp_name},"node","wire",${lp_vector},${lp_left},${lp_right},${lp_pname});
             }
           }

          foreach  my   $i_name ($spirit_design_file->findnodes("//ipxact:design/ipxact:componentInstances/ipxact:componentInstance/ipxact:instanceName[text() = '$hierConn_comref_name']"))
            {
            #/**********************************************************************/
            #/*                                                                    */
            #/* Lookup VLNV for each instantiated component                        */
            #/*                                                                    */
            #/**********************************************************************/

            my($vendor_name)         = $i_name  ->findnodes('../ipxact:componentRef/@vendor')->to_literal ;
            my($library_name)        = $i_name  ->findnodes('../ipxact:componentRef/@library')->to_literal ;
            my($component_name)      = $i_name  ->findnodes('../ipxact:componentRef/@name')->to_literal ;
            my($version_name)        = $i_name  ->findnodes('../ipxact:componentRef/@version')->to_literal ;





#            print "XCCXX INTERCONN  inst  ${hierConn_comref_name}  name  ${hierConn_name} busref  $hierConn_busref_name  child ${vendor_name}_${library_name}_${component_name}_${version_name}\n";
            my $child_file  = yp::lib::get_io_busses_db_filename($vendor_name,$library_name,$component_name,$version_name,"default");
            $child_ports_db   = new BerkeleyDB::Hash( -Filename => $child_file, -Flags => DB_CREATE ) or die "Cannot open ${child_file}: $!";
#            print "XXXXXXXX         GEN_PORTS OPENNED $child_file  \n";

            my $child_cursor = $child_ports_db->db_cursor() ;
            while ($child_cursor->c_get($key, $value, DB_NEXT) == 0) 
               {
               ( ${log_name},${direction},${type},${vector},${left},${right}) = split ':', $value;

              if(($key eq "BusRef.${hierConn_busref_name}.${log_name}"))
                {
#                 print "INTERCONN  ${hierConn_name}_${log_name}      $direction , $vector, $left , $right  \n";
                 uplift_busref(${hierConn_name},${log_name},"node","wire",${vector},${left},${right},"${hierConn_name}_${log_name}");

                $busses_db->db_put( "IXstance.${hierConn_comref_name}.${hierConn_busref_name}.${log_name}","${value}"  );



                }
               elsif(($key eq "AbsDef.${hierConn_busref_name}.master"))
                {
                $busses_db->db_put( "AbsDef.${hierConn_name}.node","$value"  );
                }
               elsif(($key eq "AbsDef.${hierConn_busref_name}.slave"))
                {
                $busses_db->db_put( "AbsDef.${hierConn_name}.node","$value"  );
                }


               }
               my $status = $child_cursor->c_close() ;
               $child_ports_db   -> db_close();
            }


        foreach  my   $i_name ($spirit_design_file->findnodes("//ipxact:design/ipxact:componentInstances/ipxact:componentInstance/ipxact:instanceName"))
           {
           #/**********************************************************************/
           #/*                                                                    */
           #/* Lookup VLNV for each instantiated component                        */
           #/*                                                                    */
           #/**********************************************************************/

           my($instance_name)       = $i_name ->findnodes('./text()')->to_literal ;
           my($vendor_name)         = $i_name  ->findnodes('../ipxact:componentRef/@vendor')->to_literal ;
           my($library_name)        = $i_name  ->findnodes('../ipxact:componentRef/@library')->to_literal ;
           my($component_name)      = $i_name  ->findnodes('../ipxact:componentRef/@name')->to_literal ;
           my($version_name)        = $i_name  ->findnodes('../ipxact:componentRef/@version')->to_literal ;

           if( "$instance_name" eq  "$hierConn_comref_name"     )
             {
#              print "INTERCONNECTION    $instance_name   $vendor_name   $library_name    $component_name  $version_name  $hierConn_busref_name   $hierConn_name           \n";
             }
           }
         }

     #/**********************************************************************/
     #/*                                                                    */
     #/* Read all wires and store into array                                */
     #/*                                                                    */
     #/**********************************************************************/



   foreach  my   $i_name ($spirit_design_file->findnodes("//ipxact:design/ipxact:vendorExtensions/socgen:nodes/socgen:node/ipxact:name"))
        {
        my($node_name)       = $i_name ->findnodes('./text()')->to_literal ;
        my($node_busdef)     = $i_name ->findnodes('../socgen:busDef/text()')->to_literal ;
        my($node_left)       = $i_name ->findnodes('../ipxact:wire/ipxact:vector/ipxact:left/text()')->to_literal ;
        my($node_right)      = $i_name ->findnodes('../ipxact:wire/ipxact:vector/ipxact:right/text()')->to_literal ; 
        my($node_type)       = $i_name ->findnodes('../ipxact:typeName/text()')->to_literal ;
      
        unless($node_busdef){   $node_busdef =    $node_name;     }

        if(  $node_left ne "" ) 
          { 
          if(  $node_right  eq "" ){ $node_right = $node_left; } 
          $node_vector = "vector";
          }
        else                     
          { 
          $node_vector = "scaler";
          $node_left   = "none";
          $node_right  = "none";
          }

#          print "WIRE_NODE  ${node_name}     node  , $node_type , $node_vector, $node_left , $node_right    $node_busdef \n";
          uplift_busref("adhoc",     "${node_name}" , "node" , ${node_type} , ${node_vector}, ${node_left} , ${node_right},${node_name});
        }


     #/**********************************************************************/
     #/*                                                                    */
     #/* Read all adHocConnections and load instance connect info into array*/
     #/*                                                                    */
     #/**********************************************************************/



     foreach  my   $i_name ($spirit_design_file->findnodes('//ipxact:adHocConnections/ipxact:adHocConnection/ipxact:internalPortReference/@componentRef'))
        {
        my($componentRef_name)      = $i_name ->to_literal;
        my($adhocConnection_name)   = $i_name ->findnodes('../../ipxact:name/text()')->to_literal ;
        my($tied_value)             = $i_name ->findnodes('../../@tiedValue')->to_literal ;
        my($int_portRef_name)       = $i_name ->findnodes('../@portRef')->to_literal ;
        my($ext_portRef_name)       = $i_name ->findnodes('../../ipxact:externalPortReference/@portRef')->to_literal ;
        my($left)                   = $i_name ->findnodes('../../ipxact:externalPortReference/@left')->to_literal ;
        my($right)                  = $i_name ->findnodes('../../ipxact:externalPortReference/@right')->to_literal ;
        if(  $left ne "" ) 
          { 
          if(  $right  eq "" ){ $right = $left; } 
          $vector = "vector";
          }
        else                     
          { 
          $vector = "scaler";
          $left   = "none";
          $right  = "none";
          }
          if ( ${adhocConnection_name} eq "" )  { $adhocConnection_name = "***";}
          if (  ${ext_portRef_name} eq ""    )  { $ext_portRef_name     = "***";}
#print "NNNNNNNNN $componentRef_name $adhocConnection_name ||${tied_value}||  $int_portRef_name $ext_portRef_name $left $right \n";
        if($tied_value )
          { 
          $busses_db->db_put( "AdHoc_${componentRef_name}__${int_portRef_name}","${tied_value}:${ext_portRef_name}:${type}:${vector}:${left}:${right}"  );
#print"NNNNNNNNN  AdHoc_${componentRef_name}__${int_portRef_name}    ${tied_value}:${ext_portRef_name}:${type}:${vector}:${left}:${right}\n"  ;
          }
         else
          {
          $busses_db->db_put( "AdHoc_${componentRef_name}__${int_portRef_name}","${adhocConnection_name}:${ext_portRef_name}:${type}:${vector}:${left}:${right}"  );
#print "NNNNNNNNN   AdHoc_${componentRef_name}__${int_portRef_name}    ${adhocConnection_name}:${ext_portRef_name}:${type}:${vector}:${left}:${right} \n"  ;
        $_ = ${adhocConnection_name};
        if(/(\w+)/)   
            {        
            $adhocConnection_name      = $1;
            unless( looks_like_number($adhocConnection_name) ) 
                  {
#                  print "ADHOC_NODE   ${adhocConnection_name}  ,  node  ,  wire  , $vector, $left , $right  \n";
                  uplift_busref("adhoc", ${adhocConnection_name} , "node" , "wire" , ${vector}, ${left} , ${right}, ${adhocConnection_name});
                  }
            }
          }
        }





     #/**********************************************************************/
     #/*   1685_2014 version                                                */
     #/* Read all adHocConnections and load instance connect info into array*/
     #/*                                                                    */
     #/**********************************************************************/



     foreach  my   $i_name ($spirit_design_file->findnodes('//ipxact:adHocConnections/ipxact:adHocConnection/ipxact:portReferences/ipxact:internalPortReference/@componentRef'))
        {
        my($componentRef_name)      = $i_name ->to_literal;
        my($adhocConnection_name)   = $i_name ->findnodes('../../../ipxact:name/text()')->to_literal ;
        my($tied_value)             = $i_name ->findnodes('../../../@tiedValue')->to_literal ;
        my($int_portRef_name)       = $i_name ->findnodes('../@portRef')->to_literal ;
        my($ext_portRef_name)       = $i_name ->findnodes('../../ipxact:externalPortReference/@portRef')->to_literal ;
        my($left)                   = $i_name ->findnodes('../../ipxact:externalPortReference/@left')->to_literal ;
        my($right)                  = $i_name ->findnodes('../../ipxact:externalPortReference/@right')->to_literal ;
        if(  $left ne "" ) 
          { 
          if(  $right  eq "" ){ $right = $left; } 
          $vector = "vector";
          }
        else                     
          { 
          $vector = "scaler";
          $left   = "none";
          $right  = "none";
          }
          if ( ${adhocConnection_name} eq "" )  { $adhocConnection_name = "***";}
          if (  ${ext_portRef_name} eq ""    )  { $ext_portRef_name     = "***";}
#print "NNNNNNNNN-N $componentRef_name $adhocConnection_name ||${tied_value}||  $int_portRef_name $ext_portRef_name $left $right \n";
        if($tied_value )
          { 
          $busses_db->db_put( "AdHoc_${componentRef_name}__${int_portRef_name}","${tied_value}:${ext_portRef_name}:${type}:${vector}:${left}:${right}"  );
#print "NNNNNNNNN-N  AdHoc_${componentRef_name}__${int_portRef_name}    ${tied_value}:${ext_portRef_name}:${type}:${vector}:${left}:${right}\n"  ;
          }
         else
          {
          $busses_db->db_put( "AdHoc_${componentRef_name}__${int_portRef_name}","${adhocConnection_name}:${ext_portRef_name}:${type}:${vector}:${left}:${right}"  );
#print "NNNNNNNNN-N   AdHoc_${componentRef_name}__${int_portRef_name}    ${adhocConnection_name}:${ext_portRef_name}:${type}:${vector}:${left}:${right} \n"  ;
        $_ = ${adhocConnection_name};
        if(/(\w+)/)   
            {        
            $adhocConnection_name      = $1;
            unless( looks_like_number($adhocConnection_name) ) 
                  {
#                  print "ADHOC_NODE   ${adhocConnection_name}  ,  node  ,  wire  , $vector, $left , $right  \n";
                  uplift_busref("adhoc", ${adhocConnection_name} , "node" , "wire" , ${vector}, ${left} , ${right}, ${adhocConnection_name});
                  }
            }
          }
        }








}






#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/




sub uplift_busref
   {
   my @params     = @_;
   my $phy_name         = pop(@params);
   my $right            = pop(@params);
   my $left             = pop(@params);
   my $vector           = pop(@params);
   my $type             = pop(@params);
   my $direction        = pop(@params);
   my $log_name         = pop(@params);
   my $busref_name      = pop(@params);
 
#   print "BUS_UPLIFT  $busref_name $log_name  $direction  $type  $vector  $left  $right  $phy_name  \n";
   $busses_db->db_put( "","${log_name}:${direction}:${type}:${vector}:${left}:${right}:${phy_name}"  );

   my $uplift_data;
   my $uplift_log_name ;
   my $uplift_phy_name ;
   my $uplift_direction ;
   my $uplift_type;
   my $uplift_vector;
   my $uplift_left;
   my $uplift_right;


   $busses_db->db_get("BusRef.${busref_name}.$log_name", $uplift_data );
   (${uplift_log_name},${uplift_direction},${uplift_type},${uplift_vector},${uplift_left},${uplift_right},${uplift_phy_name}  ) = split ':', $uplift_data;

   $busses_db->db_get("", $uplift_data );
   (${log_name},${direction},${type},${vector},${left},${right},${phy_name}  ) = split ':', $uplift_data;
   $busses_db->db_del("");


  if(${uplift_phy_name} ne "")
     {
     if(${uplift_phy_name} ne "${busref_name}_${uplift_log_name}"  )
       {
       ${phy_name}= ${uplift_phy_name};
#       print "SET   |${uplift_phy_name}|${busref_name}_${uplift_log_name}| \n";
       }

     }



   if(${uplift_log_name})
     {
#     print "REPLACING   ${busref_name} ${uplift_log_name}  ${uplift_direction}  ${uplift_type}  ${uplift_vector}  ${uplift_left}  ${uplift_right} ${uplift_phy_name} \n";
     if(${uplift_direction} ne "node"   ) {        $direction =${uplift_direction};}

     if(${type} eq "wire" )   { $type =${uplift_type};}

     if(${uplift_vector} eq "vector") 
          {
          if( $vector eq "vector" )
              {
              if( looks_like_number($uplift_left))
                  {
                  if( looks_like_number($left) )
                    {
                    if($uplift_left  > $left ) {$left  = $uplift_left;}
                    }
          
                  }
              else  
                 { 
                 if( looks_like_number($left) ) {$left  = ${uplift_left}; }               
                 unless(${direction} ne "node") {$left  = ${uplift_left}; }               
                 }
               if( looks_like_number($uplift_right) &&  looks_like_number($right) )  { if($uplift_right  < $right ) {$right  = $uplift_right;}}
               }
          else
             {
             $vector = "vector";
             $left   = ${uplift_left};
             $right  = ${uplift_right};
             }
          }
      }
#   print "WITH       ${busref_name}  $log_name  $direction  $type  $vector  $left  $right $phy_name \n";

   $busses_db->db_put( "BusRef.${busref_name}.$log_name","${log_name}:${direction}:${type}:${vector}:${left}:${right}:${phy_name}"  );
   }



          

#/*********************************************************************************************/
#/                                                                                            */
#/ Process hierarchial connection                                                             */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/




sub process_hier
   {
   my @params                    = @_;
   my $spirit_design_file        = pop(@params);
   my $hierConn_busref_name      = pop(@params);
   my $hierConn_name             = pop(@params);
   my $hierConn_comref_name      = pop(@params);



   foreach  my   $i_name ($spirit_design_file->findnodes("//ipxact:design/ipxact:componentInstances/ipxact:componentInstance/ipxact:instanceName[text() = '$hierConn_comref_name']"))
            {
            #/**********************************************************************/
            #/*                                                                    */
            #/* Lookup VLNV for each instantiated component                        */
            #/*                                                                    */
            #/**********************************************************************/

            my($vendor_name)         = $i_name  ->findnodes('../ipxact:componentRef/@vendor')->to_literal ;
            my($library_name)        = $i_name  ->findnodes('../ipxact:componentRef/@library')->to_literal ;
            my($component_name)      = $i_name  ->findnodes('../ipxact:componentRef/@name')->to_literal ;
            my($version_name)        = $i_name  ->findnodes('../ipxact:componentRef/@version')->to_literal ;

            my $child_file  = yp::lib::get_io_busses_db_filename($vendor_name,$library_name,$component_name,$version_name,"default");
            $child_ports_db   = new BerkeleyDB::Hash( -Filename => $child_file, -Flags => DB_CREATE ) or die "Cannot open ${child_file}: $!";
            my $child_cursor = $child_ports_db->db_cursor() ;
            while ($child_cursor->c_get($key, $value, DB_NEXT) == 0) 
               {
               ( ${log_name},${direction},${type},${vector},${left},${right}) = split ':', $value;
               if(($key eq "BusRef.${hierConn_busref_name}.${log_name}"))
                 {
                 if(${vector} eq "vector")
                      {
                      unless( looks_like_number($left) ) { $left=0;}
                      }
                  uplift_busref(${hierConn_name},${log_name},${direction},"wire",${vector},${left},${right},"${hierConn_name}_${log_name}");
                $busses_db->db_put( "IXstance.${hierConn_comref_name}.${hierConn_busref_name}.${log_name}","${value}"  );
                }
               elsif (($key eq "AbsDef.${hierConn_busref_name}.master"))
                {
                ( ${xx_vendor},${xx_library},${xx_name},${xx_version}) = split ':', $value;
                $busses_db->db_put( "AbsDef.${hierConn_name}.master","${xx_vendor}:${xx_library}:${xx_name}:${xx_version}"  );
                $busses_db->db_put( "AbsDef.${hierConn_name}.interconnect","${hierConn_comref_name}..${hierConn_busref_name}::"  );
                $busses_db->db_put( "Instance.${hierConn_comref_name}.${hierConn_busref_name}","${hierConn_name}"  );
                }
               elsif (($key eq "AbsDef.${hierConn_busref_name}.slave"))
                {
                ( ${xx_vendor},${xx_library},${xx_name},${xx_version}) = split ':', $value;
                $busses_db->db_put( "AbsDef.${hierConn_name}.slave","${xx_vendor}:${xx_library}:${xx_name}:${xx_version}"  );
                $busses_db->db_put( "AbsDef.${hierConn_name}.interconnect","${hierConn_comref_name}..${hierConn_busref_name}::"  );
                $busses_db->db_put( "Instance.${hierConn_comref_name}.${hierConn_busref_name}","${hierConn_name}"  );
                }
               }
               my $status = $child_cursor->c_close() ;
               $child_ports_db   -> db_close();
            }



           }


1