eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*  Traverse a socgen project and link it                             */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010-2011>  <Ouabache Design Works>              */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/


############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;


$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.




############################################################################
### Process the options
############################################################################

Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help"
) || die "(use '$program_name -h' for help)";


##############################################################################
## Help option
##############################################################################
if ( $opt_h or $opt_help  ) 
   { 
   print "\n type create_yp\n";
   exit 1;
   }


##############################################################################
## 
##############################################################################

my $home                     = cwd();
my $index_filename           = "./ip_report.txt";



       


open   OUTFILE,">$index_filename" or die "unable to open $index_filename";






   
#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/

my $parser = XML::LibXML->new();
$root = "${home}/";
&link_dir( "$root"  );







#/*********************************************************************************************/
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/

# recursively map directory information 

sub link_dir {
    my $src  = shift;
    return unless( -e $src );

    if( -d $src ) 
        {

        my @contents = (  );
        opendir( DIR, $src );
        while( my $item = readdir( DIR )) 
            {
            next if( $item eq '.' or $item eq '..'   or $item eq '.svn'    );
            push( @contents, $item );
            }
        closedir( DIR );
 
        # recurse on items in the directory
        foreach my $item ( @contents )          
          {
          $_ = $item;
          if(/(\S+)\.xml/) 
             { 
             my $t_name                = $1;
             $_ = $src;
             if(/${home}\/\/(\S+)/) { $t_local = $1; }






if($t_name eq "design")
{
$vendor = "";

}



elsif($t_name eq "library")
{
$vendor = "";
}




else
{
my $spirit_file    = $parser->parse_file("${home}/${t_local}/${t_name}.xml"); 



foreach my $comp ($spirit_file->findnodes('//spirit:component')) 
   {
   $name     = $comp->findnodes('./spirit:name/text()')->to_literal ;
   $version  = $comp->findnodes('./spirit:version/text()')->to_literal ;
   $vendor   = $comp->findnodes('./spirit:vendor/text()')->to_literal ;
   $library  = $comp->findnodes('./spirit:library/text()')->to_literal ;
   $type     = "spirit:component";
   }


foreach my $design ($spirit_file->findnodes('//spirit:design')) 
   {
   $name     = $design->findnodes('./spirit:name/text()')->to_literal ;
   $version  = $design->findnodes('./spirit:version/text()')->to_literal ;
   $vendor   = $design->findnodes('./spirit:vendor/text()')->to_literal ;
   $library  = $design->findnodes('./spirit:library/text()')->to_literal ;
   $type     = "spirit:design";


   }




foreach my $design ($spirit_file->findnodes('//spirit:abstractionDefinition')) 
   {
   $name     = $design->findnodes('./spirit:name/text()')->to_literal ;
   $version  = $design->findnodes('./spirit:version/text()')->to_literal ;
   $vendor   = $design->findnodes('./spirit:vendor/text()')->to_literal ;
   $library  = $design->findnodes('./spirit:library/text()')->to_literal ;
   $type     = "spirit:abstractionDefinition";


   }


foreach my $design ($spirit_file->findnodes('//spirit:busDefinition')) 
   {
   $name     = $design->findnodes('./spirit:name/text()')->to_literal ;
   $version  = $design->findnodes('./spirit:version/text()')->to_literal ;
   $vendor   = $design->findnodes('./spirit:vendor/text()')->to_literal ;
   $library  = $design->findnodes('./spirit:library/text()')->to_literal ;
   $type     = "spirit:busDefinition";
   }

}
           if($vendor)
             {
             $vendor_match = "${vendor}/";
             $library_match = "/${library}/";
             $name_match = "/${name}/";

             $_ = $t_local;
             if(/($vendor_match)(\S+)/)                        { $vendor_path      = $2; }
             else                                              { $vendor_path      = ""; }
             if(/\S+($library_match)(\S+)/)                    { $library_path     = $2; }
             else                                              { $library_path     = ""; }
             if(/\S+($library_match)(\S+)($name_match)(\S+)/)  { $lib_comp_sep     = $2; }
             else                                              { $lib_comp_sep     = ""; }
             if(/\S?($name_match)(\S+)/)                       { $exp_component_path   = $2; }
             else                                              { $exp_component_path   = ""; }

             $_ = $library_path;
             if(/\S+\/(\S+)/)                                  { $component_path   = $1; }
             else                                              { $component_path   = ""; }

             if($exp_component_path)                           { $component_path   =  $exp_component_path;      };

             print  OUTFILE " ip-xact file  \n";
             print  OUTFILE "   vendor             ${vendor}\n";
             print  OUTFILE "   library            ${library}\n";
             print  OUTFILE "   name               ${name}\n";
             print  OUTFILE "   version            ${version}\n";
             print  OUTFILE "   type               ${type}\n";
             print  OUTFILE "   file_name          ${t_name}.xml\n";
             print  OUTFILE "   dir_name           ${t_local}\n";
             print  OUTFILE "   vendor_path        ${vendor_path}\n";
             print  OUTFILE "   library_path       ${library_path}\n";
             print  OUTFILE "   component_path     ${component_path}\n";
             print  OUTFILE "\n\n";
             }


             }

          &link_dir("$src/$item" );
          } 
      
     }

}



