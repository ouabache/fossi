eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/****************************************************************************/
#/*                                                                          */
#/*   SOCGEN Design for Reuse toolset                                        */
#/*                                                                          */
#/*   Version 1.0.0                                                          */
#/*                                                                          */
#/*   Author(s):                                                             */
#/*      - John Eaton, z3qmtr45@gmail.com                                    */
#/*                                                                          */
#/****************************************************************************/
#/*                                                                          */
#/*                                                                          */
#/*             Copyright 2016 John T Eaton                                  */ 
#/*                                                                          */
#/* Licensed under the Apache License, Version 2.0 (the "License");          */
#/* you may not use this file except in compliance with the License.         */
#/* You may obtain a copy of the License at                                  */
#/*                                                                          */
#/*    http://www.apache.org/licenses/LICENSE-2.0                            */
#/*                                                                          */
#/* Unless required by applicable law or agreed to in writing, software      */
#/* distributed under the License is distributed on an "AS IS" BASIS,        */
#/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
#/* See the License for the specific language governing permissions and      */
#/* limitations under the License.                                           */
#/*                                                                          */
#/*                                                                          */
#/****************************************************************************/


############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;
use BerkeleyDB;


$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
           "envidentifier=s" => \$envidentifier,
           "prefix=s" => \$prefix,
           "vendor=s" => \$vendor,
           "library=s" => \$library,
           "component=s" => \$component,
           "version=s" => \$version,
           "top_file=s" => \$top_file,
           "suffix=s" => \$suffix,
           "leader=s" => \$leader,
           "top","top_lib"
) || die "(use '$program_name -h' for help)";



##############################################################################
## Help option
##############################################################################
if ( $opt_h  or $opt_help) 
  { print "\n gen_elab_child_filelist -prefix /work -envidentifier *simulation*  -vendor vendor_name  -library library_name  -component component_name -version version_name   ";
    print "\n";
    exit 1;
  }


##############################################################################
## 
##############################################################################

$home = cwd();
my $variant;
my $view;
my $filesetref_name;




if($version)       {$variant   = "${component}_${version}";}
else               {$variant   = "${component}";}

my $parser = XML::LibXML->new();
my $spirit_component_file  = $parser->parse_file(yp::lib::find_ipxact_component($vendor,$library,$component,$version));
my $comp_xml_sep           = yp::lib::find_comp_xml_sep($vendor,$library,$component,$version);
my $lib_comp_sep           = yp::lib::find_lib_comp_sep($vendor,$library,$component);
my $child_dir              = yp::lib::get_child_dir;




 print "\n---GEN_elab_child_filelist -prefix $prefix -envidentifier $envidentifier  -vendor $vendor  -library $library  -component $component -version $version  \n";

foreach my $X_view ($spirit_component_file->findnodes('//ipxact:component/ipxact:model/ipxact:views/ipxact:view')) 
         {
         my($Xview_name)            = $X_view->findnodes('./ipxact:name/text()')->to_literal ;
         my($Xview_envidentifier)   = $X_view->findnodes('./ipxact:envIdentifier/text()')->to_literal ;
         my($Xview_filesetref_name)  = $X_view->findnodes('./ipxact:fileSetRef/ipxact:localName/text()')->to_literal ;

#print  "XXXXX   $Xview_name || $Xview_envidentifier || $Xview_filesetref_name  \n";

         if($envidentifier eq $Xview_envidentifier ) 
              { 
              $view = $Xview_name;
              $filesetref_name = $Xview_filesetref_name;
              }            
         }

#print  "XXXXZ   $view || $filesetref_name  \n";


if((defined $view  ) && defined $filesetref_name  )

{

unless($suffix) { $suffix = $view };


my $path ="${home}${prefix}/${vendor}__${library}${lib_comp_sep}${component}${comp_xml_sep}/../filelists";
mkdir $path,0755          unless( -e $path );





my @configs  = yp::lib::get_component_configs($vendor,$library,$component,$version);



foreach my $config (@configs)

{
#print "Config  $config \n";

my @simfilelist = ();


my $outfile ="${home}${prefix}/${vendor}__${library}${lib_comp_sep}${component}${comp_xml_sep}/../filelists/${variant}_${config}.${suffix}\n";
#print "OUTFILE  $outfile";
open SIMFILE,">$outfile" or die "unable to open $outfile";
if($top_file) 

{
#print SIMFILE  "$top_file  \n";
push @simfilelist,"$top_file  \n" ;
}



my $top_filename = find_filename( $filesetref_name, $vendor, $library,$component,$version);
#print SIMFILE "${home}${prefix}/${top_filename}_${config}.v \n";
push @simfilelist,"${home}${prefix}/${top_filename}_${config}.v \n";


 my $elab_db_filename = yp::lib::get_elab_db_filename($vendor,$library,$component,$version,$config);

 my $elab_db  = new BerkeleyDB::Hash( -Filename => "$elab_db_filename", -Flags => DB_CREATE ) or die "Cannot open $elab_db_filename: $!";

 my $key;
 my $value;

 $cursor = $elab_db ->db_cursor() ;
 while ($cursor->c_get($key, $value, DB_NEXT) == 0) 
   {

   my $VLNV;
   my $vlnv;
   ( ${VLNV},${vlnv}) = split( /___root./ , $key);
   if($VLNV eq "component") 
     {

     if($vlnv)
       {
#       print "$key $vlnv   $value\n";
#       print SIMFILE "OUT  $value  \n";
       my $ven;
       my $lib;
       my $cmp;
       my $ver;
       my $cfg;

       ( ${ven},${lib},${cmp},${ver},${cfg}) = split( /:/ , $value);

#       print "FIND  ${ven} ${lib} ${cmp} ${ver} ${cfg} $view \n";
       my $filename = find_filename( $filesetref_name, $ven, $lib,$cmp,$ver);
#       print SIMFILE "${home}/${child_dir}/${filename}_${cfg}.v \n";
       push @simfilelist,"${home}/${child_dir}/${filename}_${cfg}.v \n";

       }
     }
    }

@simfilelist      = sys::lib::trim_sort(@simfilelist);

foreach my $simfile (@simfilelist)
{
       print SIMFILE "${simfile}";
}




my $status = $cursor->c_close() ;
$elab_db->db_close();

}

}









































#/*********************************************************************************************/
#/                                                                                            */
#/  Create filelists for simulation, synthesis and linting                                    */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/










#/*********************************************************************************************/
#/  find filename                                                                             */
#/                                                                                            */
#/  returns gloabal  name of the file                                                         */
#/                                                                                            */
#/                                                                                            */
#/*********************************************************************************************/

sub find_filename 
   {
   my @params             = @_;
   my $version            = pop(@params);
   my $component          = pop(@params);
   my $library            = pop(@params);
   my $vendor             = pop(@params);
   my $filesetref_name    = pop(@params);

   my $variant;
   if($version)       {$variant   = "${component}_${version}";}
   else               {$variant   = "${component}";}

   my  @filelist =       yp::lib::parse_component_brothers("$vendor","$library","$component","$version");
   my $comp_xml_sep    = yp::lib::find_comp_xml_sep($vendor,$library,$component,$version);
   my $lib_comp_sep    = yp::lib::find_lib_comp_sep($vendor,$library,$component);
   my $library_path    = "${lib_comp_sep}${component}${comp_xml_sep}";



foreach $line (@filelist) 
   {
   $_ = $line;
   if(/::(\S+)::(\S+)::(\S+)::(\S+)::/) 
     { 
     $new_library        = $2;
     $new_component      = $3;
     $new_vendor         = $1;
     $new_version        = $4;

     my $spirit_component_file    = $parser->parse_file(yp::lib::find_ipxact_component($new_vendor,$new_library,$new_component,$new_version));


           foreach  my   $i_name ($spirit_component_file->findnodes("//ipxact:fileSets/ipxact:fileSet/ipxact:file/ipxact:name"))
              {    
              my($file_name)      = $i_name ->findnodes('./text()')->to_literal ;
              my($file_type)      = $i_name ->findnodes('../ipxact:userFileType/text()')->to_literal ;
              my($logical_name)   = $i_name ->findnodes('../ipxact:logicalName/text()')->to_literal ;
              my($view_file)      = $i_name ->findnodes('../../ipxact:name/text()')->to_literal ;
              if(($file_type eq "libraryDir") &&  ($logical_name eq "dest_dir")  )
                 { 

                 if( $view_file eq  $filesetref_name )
                   { 
                   return ("${vendor}__${library}${library_path}/${file_name}${variant}");
                   };
                 }     
              }
    }
}
}


1

