
reg actual;

parameter   EXTEST          =   4'b0000;
parameter   SAMPLE          =   4'b0001;
parameter   HIGHZ_MODE      =   4'b0010;
parameter   CHIP_ID_ACCESS  =   4'b0011;
parameter   CLAMP           =   4'b1000;
parameter   RPC_DATA        =   4'b1010;
parameter   RPC_ADD         =   4'b1001;
parameter   BYPASS          =   4'b1111;
parameter   INST_RETURN     =   4'b1101;



initial
begin
$display("              ");
$display("              ===================================================");
$display("              Test Start");
$display("              ===================================================");
$display("              ");
test.cg.next(20);

fork
begin
test.uart_model.rcv_byte(8'h0d);
test.uart_model.rcv_byte(8'h0a);
test.uart_model.rcv_byte(8'h4b);
test.uart_model.rcv_byte(8'h49);
test.uart_model.rcv_byte(8'h4d);
test.uart_model.rcv_byte(8'h0d);
test.uart_model.rcv_byte(8'h0a);
test.cg.next(4000);
end
begin
$display("              ");
$display("              ===================================================");
$display("              JTAG Test Start");
$display("              ===================================================");
$display("              ");





test.cg.next(2);
test.jtag_model.enable_tclk; 
test.cg.next(20);


test.jtag_model.enable_trst_n; 
test.jtag_model.enable_reset; 
test.jtag_model.init; 
test.cg.next(10);
test.jtag_model.LoadTapInst(EXTEST,INST_RETURN);
test.cg.next(100);
test.jtag_model.LoadTapInst(CLAMP,INST_RETURN);


test.cg.next(100);
test.jtag_model.LoadTapInst(CHIP_ID_ACCESS,INST_RETURN);
test.jtag_model.Shift_Cmp_32(32'ha5a5a5a5,32'hf1c2e093);


test.SW_reg   = 8'h00;
test.cg.next(100);
test.jtag_model.LoadTapInst(RPC_DATA,INST_RETURN);
test.cg.next(1000);

Shift_Cmp_8(8'ha5,8'h00);

test.SW_reg   = 8'h00;
test.cg.next(1000);
Shift_Cmp_8(8'hf0,8'h00);




test.cg.next(100);

test.jtag_model.LoadTapInst(RPC_ADD,INST_RETURN);

test.cg.next(100);

Shift_Cmp_18(18'h38000,18'h00004);
test.cg.next(500);
Shift_Cmp_18(18'h1fc21,18'h00004);
test.cg.next(500);
Shift_Cmp_18(18'h1f821,18'h0fe14);
test.cg.next(500);
Shift_Cmp_18(18'h1f021,18'h0fc14);
test.cg.next(500);
Shift_Cmp_18(18'h1c021,18'h0f814);
test.cg.next(500);
Shift_Cmp_18(18'h18021,18'h0e014);
test.cg.next(500);
Shift_Cmp_18(18'h10021,18'h0c014);
test.cg.next(500);
Shift_Cmp_18(18'h00021,18'h08014);
test.cg.next(500);
Shift_Cmp_18(18'h1fe21,18'h00014);
test.cg.next(500);




test.jtag_model.LoadTapInst(BYPASS,INST_RETURN);

test.cg.next(100);






end
join
test.cg.exit;
end



task automatic  Shift_Cmp_8;    // Initialize boundary register with outputs disabled
                         // This tasks starts at RT_IDLE and ends at SHIFT_DR

  parameter [15:0] LENGTH =  8;

  input [LENGTH:1]  Dataout;
  input [LENGTH:1]  DataExp;
  integer i;
      
  reg [LENGTH:1]  DataBack;

  begin
    test.jtag_model.Clk_bit(1'b1,1'b0,actual);// Transition from RT_IDLE to SELECT_DR
    test.jtag_model.Clk_bit(1'b0,1'b0,actual);// Transition from SELECT_DR to CAPTURE_DR
    test.jtag_model.Clk_bit(1'b0,1'b0,actual);// Transition from CAPTURE_DR to SHIFT_DR 
    for (i = 1; i <= LENGTH; i = i+1)
       test.jtag_model.Clk_bit((i==LENGTH),Dataout[i],DataBack[i]);
    $display  ("%t  %m    Shift_data_register    wr-%h  exp-%h rd-%h    ",$realtime,Dataout,DataExp,DataBack  );

   if (DataBack  !== DataExp )
   begin
   test.cg.fail  (" Shift_cmp  receive error  ");
   end

    test.jtag_model.Clk_bit(1'b1,1'b0,actual);//Transition from EXIT1-DR to UPDATE-DR 
    test.jtag_model.Clk_bit(1'b0,1'b0,actual);// Transition from UPDATE-DR to IDLE
  end
endtask // ShiftRegister




task automatic  Shift_Cmp_18;    // Initialize boundary register with outputs disabled
                         // This tasks starts at RT_IDLE and ends at SHIFT_DR

  parameter [15:0] LENGTH =  18;

  input [LENGTH:1]  Dataout;
  input [LENGTH:1]  DataExp;
  integer i;
      
  reg [LENGTH:1]  DataBack;

  begin
    test.jtag_model.Clk_bit(1'b1,1'b0,actual);// Transition from RT_IDLE to SELECT_DR
    test.jtag_model.Clk_bit(1'b0,1'b0,actual);// Transition from SELECT_DR to CAPTURE_DR
    test.jtag_model.Clk_bit(1'b0,1'b0,actual);// Transition from CAPTURE_DR to SHIFT_DR 
    for (i = 1; i <= LENGTH; i = i+1)
       test.jtag_model.Clk_bit((i==LENGTH),Dataout[i],DataBack[i]);
    $display  ("%t  %m    Shift_data_register    wr-%h  exp-%h rd-%h    ",$realtime,Dataout,DataExp,DataBack  );

   if (DataBack  !== DataExp )
   begin
   test.cg.fail  (" Shift_cmp  receive error  ");
   end

    test.jtag_model.Clk_bit(1'b1,1'b0,actual);//Transition from EXIT1-DR to UPDATE-DR 
    test.jtag_model.Clk_bit(1'b0,1'b0,actual);// Transition from UPDATE-DR to IDLE
  end
endtask // ShiftRegister




